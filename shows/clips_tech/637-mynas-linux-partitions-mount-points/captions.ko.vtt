WEBVTT
Kind: captions
Language: ko

00:00:02.179 --> 00:00:09.389
 지난 몇 주 동안 나는 

00:00:05.549 --> 00:00:12.750
 우리 팀이 

00:00:09.389 --> 00:00:17.580
 우리는 내 엉덩이라고 불러 

00:00:12.750 --> 00:00:18.990
 엉덩이하지만 Kat five dot TV /-내가있는 곳 

00:00:17.580 --> 00:00:20.760
 제품에 대한 모든 링크를 넣어 

00:00:18.990 --> 00:00:23.460
 우리가 볼 것입니다 

00:00:20.760 --> 00:00:26.220
 토론은 주변을 둘러싼 

00:00:23.460 --> 00:00:29.550
 결정은 잘 우리는 USB 3.0과 함께 가나 요 

00:00:26.220 --> 00:00:30.900
 우리는 또한 eSATA 포트를 얻을 수 있도록 

00:00:29.550 --> 00:00:32.520
 그것은 우리에게 최대 6을 줄 것입니다 

00:00:30.900 --> 00:00:38.250
 초당 기가비트 또는 우리는 똑바로 가나 요 

00:00:32.520 --> 00:00:41.399
 이론적으로 할 수있는 USB 3.1 Rev에 

00:00:38.250 --> 00:00:44.219
 초당 최대 10 기가비트를 제공 할 수 있습니다. 

00:00:41.399 --> 00:00:45.570
 그러나 이것에 대한 한가지주의 할 점은 

00:00:44.219 --> 00:00:47.850
 우리가 될 장치 

00:00:45.570 --> 00:00:50.700
 연결-이상한 홀수 xu4 

00:00:47.850 --> 00:00:54.090
 싱글 보드 컴퓨터는 

00:00:50.700 --> 00:00:56.760
 ASP가 포함 된 USB 3.0을 사용하면 

00:00:54.090 --> 00:00:58.680
 초당 5 기가비트 

00:00:56.760 --> 00:01:00.570
 에 던져 질 숫자는 그래 

00:00:58.680 --> 00:01:02.969
 오래 된 로비에 대 한 많은 숫자 

00:01:00.570 --> 00:01:05.700
 이 대머리에서 기억하지만 그것은 

00:01:02.969 --> 00:01:08.189
 모든 결정은 나에게 의미가 있었다 

00:01:05.700 --> 00:01:10.619
 미래를 준비하고 가고 있지만 

00:01:08.189 --> 00:01:15.570
 USB 3.1 Rev를 사용하면 

00:01:10.619 --> 00:01:18.390
 5시에 Nass 유닛에 접근 할 수 있습니다 

00:01:15.570 --> 00:01:21.360
 에서 초당 기가비트 

00:01:18.390 --> 00:01:24.420
 오드 로이드 xu4 

00:01:21.360 --> 00:01:26.159
 우리의 Nass와의 연결성은 

00:01:24.420 --> 00:01:27.900
 어쨌든 기가비트 이더넷 기반 

00:01:26.159 --> 00:01:31.680
 해당 보드의 이더넷 포트 

00:01:27.900 --> 00:01:35.210
 초당 천 메가 비트이거나 

00:01:31.680 --> 00:01:37.409
 내가 좋아할지라도 

00:01:35.210 --> 00:01:39.780
 5시에 드라이브와 통신 

00:01:37.409 --> 00:01:41.939
 그런 다음 통신이 기가비트 

00:01:39.780 --> 00:01:45.229
 xu4에 하나만 될 것입니다 

00:01:41.939 --> 00:01:47.820
 기가비트이므로 이론적으로 

00:01:45.229 --> 00:01:52.200
 그 결과는 통신 

00:01:47.820 --> 00:01:54.930
 나스의 두뇌 사이는 여전히 

00:01:52.200 --> 00:01:58.049
 우리보다 5 배 빠를 것입니다 

00:01:54.930 --> 00:02:02.420
 실제 처리량- 

00:01:58.049 --> 00:02:08.369
 그 좋은 단위 자체 그래서 나는 이것을 가지고 

00:02:02.420 --> 00:02:11.310
 이 기기는 cat5 dot TV / 

00:02:08.369 --> 00:02:13.020
 내 Nass를 살펴 보도록하겠습니다. 

00:02:11.310 --> 00:02:15.600
 지금 나는 두 개의 드라이브를 넣어 

00:02:13.020 --> 00:02:18.750
 여기에 분명히 안정적이지 않은 드라이브 

00:02:15.600 --> 00:02:21.000
 II는 잠시 후에 그 일을 할 것입니다 

00:02:18.750 --> 00:02:23.910
 이 녀석은 그냥 빠졌어 괜찮아 

00:02:21.000 --> 00:02:25.920
 그래, 2 개의 4 테라 바이트 드라이브가 있습니다 

00:02:23.910 --> 00:02:27.360
 방금 연결 한 

00:02:25.920 --> 00:02:28.410
 내가 그냥 친절했기 때문에 백 백플레인 

00:02:27.360 --> 00:02:31.290
 바로 전에 이것으로 놀아 

00:02:28.410 --> 00:02:34.200
 그것이 어떻게 운영되는지보기위한 쇼 

00:02:31.290 --> 00:02:35.670
 정말 켜지지 않았어요 

00:02:34.200 --> 00:02:37.860
 내가 이것을 연결할 수 있음을보고 싶었다 

00:02:35.670 --> 00:02:41.490
 운전하고 그들이 어떻게 연결되어 있는지 확인 

00:02:37.860 --> 00:02:45.510
 예전의 2TB 드라이브가 2 개 있습니다 

00:02:41.490 --> 00:02:48.060
 백업 장치와이 아이디어는 

00:02:45.510 --> 00:02:51.390
 이 장치를 사용할 수있을 것입니다 

00:02:48.060 --> 00:02:54.060
 기본적으로 단지 여러 드라이브 

00:02:51.390 --> 00:02:57.330
 내 컴퓨터에 연결되어 있으므로 

00:02:54.060 --> 00:02:59.580
 엉덩이 포함 엉덩이 인클로저이 

00:02:57.330 --> 00:03:01.050
 하드 드라이브 인클로저는 큰 

00:02:59.580 --> 00:03:02.490
 쇼핑 할 때의 차이 

00:03:01.050 --> 00:03:05.910
 이런 종류의 것들을 위해 이것을 유지하십시오 

00:03:02.490 --> 00:03:09.120
 내가 선택한 것을 염두에두고 

00:03:05.910 --> 00:03:12.300
 무엇을하지 않는 엉덩이 단위가 아닙니다 

00:03:09.120 --> 00:03:15.360
 우리는 나에게주는 장치를 원한다 

00:03:12.300 --> 00:03:19.980
 외장 하드로 이러한 드라이브에 액세스 

00:03:15.360 --> 00:03:22.590
 드라이브에 4 개의 SATA 후면 판이 있습니다. 

00:03:19.980 --> 00:03:26.880
 후면 판에는 최대 4 개의 SATA가 사용됩니다 

00:03:22.590 --> 00:03:30.810
 드라이브와 함께 내가 볼거야 

00:03:26.880 --> 00:03:33.330
 마치 마치 4 개의 새로운 하드 드라이브 

00:03:30.810 --> 00:03:36.030
 USB 외장 하드 드라이브에 연결 

00:03:33.330 --> 00:03:39.239
 배후에있는 이론 인 내 컴퓨터 

00:03:36.030 --> 00:03:41.940
 여기에 습격이 일어나지 않습니다 

00:03:39.239 --> 00:03:44.880
 미러링이 없습니다. 아무것도 없습니다. 

00:03:41.940 --> 00:03:48.390
 그것은 단지 네 개의 드라이브에 연결되어 있습니다 

00:03:44.880 --> 00:03:50.970
 Linux 시스템에서 xu4를 사용하여 

00:03:48.390 --> 00:03:53.400
 리눅스와 함께 제공되는 놀라운 소프트웨어 

00:03:50.970 --> 00:03:55.590
 나는 리눅스가 가능하기 때문에 할 수있을거야 

00:03:53.400 --> 00:03:57.540
 서버 OS처럼 

00:03:55.590 --> 00:04:00.390
 이번 주에 배우고 우리는 

00:03:57.540 --> 00:04:03.180
 리눅스를 좋아하는 상위 500 대 

00:04:00.390 --> 00:04:05.549
 서버를 위해 

00:04:03.180 --> 00:04:08.730
 개별 SATA와 같이 표시됩니다 

00:04:05.549 --> 00:04:10.200
 내가 무엇이든 할 수있는 외장 하드 드라이브 

00:04:08.730 --> 00:04:13.320
 그들과 함께 원해서 우리가 놀게 

00:04:10.200 --> 00:04:15.239
 미러링으로 어레이 생성 

00:04:13.320 --> 00:04:17.250
 우리는 모든 것을 확인합니다 

00:04:15.239 --> 00:04:19.410
 우리가 할 수있는 다양한 일이지만 

00:04:17.250 --> 00:04:20.310
 기기는 최대 4 개의 드라이브를 사용하므로 

00:04:19.410 --> 00:04:23.400
 결정할 수있다 

00:04:20.310 --> 00:04:25.020
 데이터를 분류하는 방법 

00:04:23.400 --> 00:04:26.040
 내가 방금 두 개의 드라이브를 가지고 

00:04:25.020 --> 00:04:29.040
 시연을 위해 드라이브 

00:04:26.040 --> 00:04:33.270
 오늘은 이렇게 생겼습니다 

00:04:29.040 --> 00:04:37.050
 우리는 그것을 가지고 있으며 그것은 단순히 

00:04:33.270 --> 00:04:40.230
 나에게주는 매우 기본적인 SATA 백플레인 

00:04:37.050 --> 00:04:42.389
 이 드라이브에 접근 할 수있는 한 

00:04:40.230 --> 00:04:44.310
 장착은 실제로 없습니다. 

00:04:42.389 --> 00:04:46.350
 드라이브 트레이 또는 이와 유사한 것 없음 

00:04:44.310 --> 00:04:48.330
 이 작은 플라스틱 남자가 

00:04:46.350 --> 00:04:50.070
 그 전면에 갈거야 

00:04:48.330 --> 00:04:52.350
 조금만주는 드라이브 

00:04:50.070 --> 00:04:55.669
 그것을 뒤쪽으로 밀어 더 많은 압력 

00:04:52.350 --> 00:05:00.060
 비행기는 이것처럼 이렇게 들어갑니다 

00:04:55.669 --> 00:05:02.280
 번호 하나를 드라이브와 바로 압착 

00:05:00.060 --> 00:05:04.320
 후면 판 드라이브 번호 2로 

00:05:02.280 --> 00:05:09.120
 이 때문에 4 테라 바이트 모두 

00:05:04.320 --> 00:05:11.960
 내 오래된 백업의 기둥은 여기를 참조하십시오. 

00:05:09.120 --> 00:05:15.750
 내가 할 수있는 것보다 더 잘 볼 수 있고 

00:05:11.960 --> 00:05:17.729
 우리는 거기에 똑바로 가서 

00:05:15.750 --> 00:05:26.340
 여기이 사람은 바로 갈거야 

00:05:17.729 --> 00:05:30.180
 상단과 클립처럼 

00:05:26.340 --> 00:05:31.770
 어쨌든 클립을 거의 얻었고 

00:05:30.180 --> 00:05:32.070
 문을 닫으면 괜찮아 

00:05:31.770 --> 00:05:33.600
 토고 

00:05:32.070 --> 00:05:36.150
 그래서 우리는 그것을 발사하고 그냥 

00:05:33.600 --> 00:05:38.280
 이게 어떻게 보일지 봅시다 

00:05:36.150 --> 00:05:41.669
 컴퓨터 여기에 노트북이 있고 

00:05:38.280 --> 00:05:45.229
 내가 할 일은 빨리하자 

00:05:41.669 --> 00:05:48.570
 우선 확대하고 LS 슬래시 

00:05:45.229 --> 00:05:50.220
 난 그냥보고 싶어 SD 슬래시 SD 스타 

00:05:48.570 --> 00:05:54.150
 거기에 내가 단 하나 밖에 없어 

00:05:50.220 --> 00:05:57.120
 내 노트북에 드라이브 내 SD입니다 

00:05:54.150 --> 00:05:58.650
 축소하겠습니다. 

00:05:57.120 --> 00:06:01.860
 여기 조금 있고 나는 떠날거야 

00:05:58.650 --> 00:06:03.660
 G Part II D 우리가 얻을 수 있도록 

00:06:01.860 --> 00:06:06.389
 이게 어떻게 생겼는지 봐 

00:06:03.660 --> 00:06:09.210
 하드 드라이브까지는 

00:06:06.389 --> 00:06:12.690
 SD와 그게 유일한 하드 드라이브 

00:06:09.210 --> 00:06:14.930
 컴퓨터에서 전원을 공급할 수 있습니다 

00:06:12.690 --> 00:06:20.250
 여기에 전원 버튼이 있고 

00:06:14.930 --> 00:06:26.010
 내가 가지고있는 것은 USB 3.1 a USB C를 가지고 있다는 것입니다. 

00:06:20.250 --> 00:06:28.289
 USB 표준에 연결하는 케이블 

00:06:26.010 --> 00:06:29.729
 내 노트북과 같은 부분입니다 

00:06:28.289 --> 00:06:31.820
 나에게 사용할 것과 같은 케이블 

00:06:29.729 --> 00:06:34.370
 내 연결 

00:06:31.820 --> 00:06:36.680
 내 전으로-당신은 지금 방금 들었어요 

00:06:34.370 --> 00:06:38.000
 내 노트북에 딩이있어서 무엇을 보자 

00:06:36.680 --> 00:06:40.850
 여기서 무슨 일이야 

00:06:38.000 --> 00:06:44.090
 그래서 G part ed에서 우리는 내가 뭘보고 있는지 

00:06:40.850 --> 00:06:47.930
 G 파트 II D 새로 고침 장치를 여기로 이동 

00:06:44.090 --> 00:06:51.010
 이제는 4 테라 바이트 드라이브를 3.6 

00:06:47.930 --> 00:06:52.790
 할당되지 않은 공간을 보여주는 것 

00:06:51.010 --> 00:06:55.340
 좋은 소식이야 

00:06:52.790 --> 00:06:57.470
 바로 여기 확대 해 봅시다 

00:06:55.340 --> 00:07:03.740
 조금만 똑같이 봅시다 

00:06:57.470 --> 00:07:08.480
 명령과 이제 우리는 s DB SD c 

00:07:03.740 --> 00:07:11.780
 SD d와 SD e는 이제 우리가 C라고 상상합니다 

00:07:08.480 --> 00:07:14.900
 DD와 SD를보고 

00:07:11.780 --> 00:07:18.380
 드라이브 할당은 

00:07:14.900 --> 00:07:20.810
 리눅스는 장치를 세분화하여 

00:07:18.380 --> 00:07:24.320
 내 실제 내부 하드 드라이브로 SD a 

00:07:20.810 --> 00:07:27.040
 내 노트북 ​​SD B는 아마도 첫 번째 

00:07:24.320 --> 00:07:29.660
 순차적 인 경우이 i의 슬롯 

00:07:27.040 --> 00:07:31.730
 SDC는 두 번째입니다. SD d는 

00:07:29.660 --> 00:07:33.860
 세번째와 SD e는 네번째 

00:07:31.730 --> 00:07:36.470
 내가 맞다면 우린 그걸 찾을거야 

00:07:33.860 --> 00:07:39.880
 우린 잘할 수있어 

00:07:36.470 --> 00:07:42.850
 다시 G part ed로 들어가서 

00:07:39.880 --> 00:07:45.710
 그것은 어쨌든 그것을 확인하는 빠른 방법입니다 

00:07:42.850 --> 00:07:47.530
 비밀번호를 알고 입력 한 경우에도 

00:07:45.710 --> 00:07:51.650
 올바르게 

00:07:47.530 --> 00:07:55.910
 예 s DB 및 SDC 그래서 s DB는 

00:07:51.650 --> 00:07:58.250
 섀시 SDC에있는 첫 번째 드라이브 

00:07:55.910 --> 00:08:00.080
 내 두 번째가 될거야 그래서 난 무엇인가 

00:07:58.250 --> 00:08:03.650
 내가 원하는 모든 것을 먼저 할거야 

00:08:00.080 --> 00:08:07.790
 이 XF 엉덩이를 포맷하여 

00:08:03.650 --> 00:08:13.030
 도구 몇 가지 sudo su 및 다음으로 로그인 

00:08:07.790 --> 00:08:15.290
 슈퍼 사용자와 나는 적절한 업데이트를 갈거야 

00:08:13.030 --> 00:08:18.170
 이걸 조금 움직여 

00:08:15.290 --> 00:08:21.820
 집에있는 사람들은 이것을 받아들이고 싶습니까? 

00:08:18.170 --> 00:08:21.820
 왜 그래 그래 내가 변경 

00:08:24.460 --> 00:08:35.080
 XPT 프라하를 설치해라 

00:08:32.650 --> 00:08:37.450
 내가 벌써 가지고 있다고 봐 

00:08:35.080 --> 00:08:39.880
 어떤 파일 시스템을 고려 하시겠습니까 

00:08:37.450 --> 00:08:44.020
 당신의 Nass 당신은 당신이 생각하는 ext4를 생각할지도 모른다 

00:08:39.880 --> 00:08:47.680
 버터 FS 같은 것 같아 

00:08:44.020 --> 00:08:49.630
 내가 몇 가지가 있습니다 

00:08:47.680 --> 00:08:52.990
 내가 이것을 만들 때 고려할 것입니다. 

00:08:49.630 --> 00:08:55.450
 모든 X FS 중 첫 번째 배열은 최신 파일입니다 

00:08:52.990 --> 00:08:58.390
 사실상 무한한 시스템 

00:08:55.450 --> 00:09:02.100
 내가 가질 수있는 파일 수 

00:08:58.390 --> 00:09:03.250
 Nass는 내 파일 시스템에 있으므로 

00:09:02.100 --> 00:09:06.520
 믿을 수 없는 

00:09:03.250 --> 00:09:09.640
 ^처럼 우리도 셀 수 없어 

00:09:06.520 --> 00:09:11.920
 그 높이는 엄청난 양을 허용하고 

00:09:09.640 --> 00:09:14.650
 대용량 드라이브처럼 

00:09:11.920 --> 00:09:17.890
 현대 저널링 파일 시스템이지만 

00:09:14.650 --> 00:09:20.680
 우리의 FS 그것은 내가 좋아하는 훌륭한 파일 시스템입니다 

00:09:17.890 --> 00:09:24.880
 버터 FS 그러나 나는 여전히 느낌 

00:09:20.680 --> 00:09:28.990
 몇 가지 걱정이 몇 가지 있습니다 

00:09:24.880 --> 00:09:31.210
 예상치 못한 전력 손실과 버터 FS 

00:09:28.990 --> 00:09:33.670
 때때로 우리가 가진 일이 일어날 수 있습니다 

00:09:31.210 --> 00:09:37.120
 우리 지역의 정전 

00:09:33.670 --> 00:09:39.990
 힘이 나간 커뮤니티 

00:09:37.120 --> 00:09:42.820
 UPS가 마침내 포기할 때까지 

00:09:39.990 --> 00:09:45.850
 그런 일이 일어나고 싶지 않다면 

00:09:42.820 --> 00:09:48.040
 데이터 손실 또는 패리티 문제이므로 X FS는 

00:09:45.850 --> 00:09:53.440
 파일 시스템을 많이 유지할 수 

00:09:48.040 --> 00:09:56.230
 버터 FS는 

00:09:53.440 --> 00:09:59.170
 실제로 패리티를 잃을 수있는 문제 

00:09:56.230 --> 00:10:00.640
 전원이 꺼지면 데이터가 

00:09:59.170 --> 00:10:02.860
 내가 피하고 싶은 것 

00:10:00.640 --> 00:10:06.010
 내가 잃어버린 경우 myarray 그러나 cuz 

00:10:02.860 --> 00:10:08.260
 드라이브의 경우 내 배열의 패리티 데이터 

00:10:06.010 --> 00:10:10.030
 실패하면 문제가 생길 것입니다 

00:10:08.260 --> 00:10:11.650
 내 데이터를 다시 작성하면 

00:10:10.030 --> 00:10:14.050
 잠재적으로 약간의 데이터 손실이 있으므로 

00:10:11.650 --> 00:10:18.460
 바로 내가 피하고 싶은 것입니다 

00:10:14.050 --> 00:10:20.110
 이제 x FS Prague가 설치되었으므로 

00:10:18.460 --> 00:10:23.290
 이제 FS를 만들 수 있습니다. 

00:10:20.110 --> 00:10:25.300
 드라이브를 분할하고 

00:10:23.290 --> 00:10:27.700
 내가 원하는 터미널 사람들 에서이 작업을 수행 

00:10:25.300 --> 00:10:30.760
 터미널 에서이 작업을 수행하여 

00:10:27.700 --> 00:10:32.740
 실제로 어떻게했는지 볼 수 있습니다. 

00:10:30.760 --> 00:10:34.780
 GUI를 사용하지만 당신이되고 싶어요 

00:10:32.740 --> 00:10:37.060
 터미널 에서이 작업을 수행 할 수 있습니다. 

00:10:34.780 --> 00:10:37.810
 우리는 그것이 dev / s DB가 될 것이라는 것을 알고 있습니다. 

00:10:37.060 --> 00:10:40.660
 그건 내 

00:10:37.810 --> 00:10:44.380
 첫 번째는 괜찮아요. PI를하면 

00:10:40.660 --> 00:10:47.529
 이 테라 바이트 드라이브입니다 참조 

00:10:44.380 --> 00:10:49.540
 그들은 3 포인트 7 테라 바이트이고 

00:10:47.529 --> 00:10:53.100
 그때는 네 점 ㅋ ㅋ ㅋ ㅋ ㅋ 

00:10:49.540 --> 00:10:56.950
 바이트는 모두 102로 반올림됩니다. 

00:10:53.100 --> 00:10:58.990
 그래서 우리는 새로운 파티션을 만들 것입니다 

00:10:56.950 --> 00:11:03.010
 지금 당신이 도움이 필요하면 그냥 밀어 

00:10:58.990 --> 00:11:05.470
 M은 무슨 도움이 되었습니까? 

00:11:03.010 --> 00:11:06.520
 많은 의미가 있지만 

00:11:05.470 --> 00:11:09.100
 물론 우리가하는 첫 번째 명령 

00:11:06.520 --> 00:11:11.529
 새로운 파티션에는 n이 필요합니다. 

00:11:09.100 --> 00:11:13.150
 n을 누르면 파티션 번호를 입력합니다 

00:11:11.529 --> 00:11:15.610
 그냥 Enter 키를 누른 다음 

00:11:13.150 --> 00:11:16.930
 섹터 입력 후 마지막 섹터 입력 

00:11:15.610 --> 00:11:18.550
 전체 드라이브를 사용하고 싶기 때문에 

00:11:16.930 --> 00:11:20.050
 서명을 제거하고 

00:11:18.550 --> 00:11:23.110
 저 한테이 드라이브를 물어봐 

00:11:20.050 --> 00:11:25.980
 이미 파일 시스템이 있고 

00:11:23.110 --> 00:11:29.290
 암호화 된 crypto Luc의 서명 

00:11:25.980 --> 00:11:31.930
 아마 당신의 루크 덤프로 생성 

00:11:29.290 --> 00:11:33.370
 그게 내 오래된 것이기 때문에 이미 알고 있습니다 

00:11:31.930 --> 00:11:35.710
 백업 기억하지만 내가 언급 

00:11:33.370 --> 00:11:38.230
 내가 지금 새로운 백업을 받았음을 알고 

00:11:35.710 --> 00:11:39.820
 이것은 중복되며 필요하지 않으며 

00:11:38.230 --> 00:11:42.339
 가능한 지점에 중복 

00:11:39.820 --> 00:11:43.930
 나는 아무것도 잃지 않을 것입니다 파괴 

00:11:42.339 --> 00:11:46.000
 그 서명을 제거하고 싶습니까? 

00:11:43.930 --> 00:11:49.000
 알았어 우리가 갈거야 그래서 내가 쓸거야 

00:11:46.000 --> 00:11:53.440
 W와 함께 나가면 그렇게하면 지금 끝났습니다. 

00:11:49.000 --> 00:11:55.780
 F 디스크-L 슬래시 개발 슬래시 DB I 

00:11:53.440 --> 00:11:58.300
 내가 지금 s DB 하나를 가지고 있음을 알아야한다 

00:11:55.780 --> 00:12:01.120
 이것은 s DB의 첫 번째 파티션입니다. 

00:11:58.300 --> 00:12:04.780
 내 섀시에서 첫 번째 드라이브이며 

00:12:01.120 --> 00:12:06.339
 전체 3.7 테라 바이트이며 

00:12:04.780 --> 00:12:07.839
 리눅스 파일 시스템 이제 마운트 할 수 없습니다 

00:12:06.339 --> 00:12:12.370
 아직 파일이 없기 때문에 

00:12:07.839 --> 00:12:14.410
 시스템은 FS를 mkfs 도트 x FS로 만듭니다. 

00:12:12.370 --> 00:12:17.860
 x FS 파일 시스템을 선택했기 때문에 

00:12:14.410 --> 00:12:20.560
 X t4도 제대로 할 수 있지만 우리는 

00:12:17.860 --> 00:12:22.930
 x FS를 수행하고 dev s DB를 사용합니다. 

00:12:20.560 --> 00:12:27.070
 지금 것 중 하나는 정말 정말 

00:12:22.930 --> 00:12:29.650
 x FS에 대한 좋은 점은 그것이 속도입니다 

00:12:27.070 --> 00:12:33.130
 드라이브를 4 테라 바이트로 포맷합니다 

00:12:29.650 --> 00:12:35.080
 운전하고 아마 아마 말할 것입니다 

00:12:33.130 --> 00:12:38.290
 해당 드라이브를 포맷 할 수있을 것입니다 

00:12:35.080 --> 00:12:40.600
 10 분의 1의 시간처럼 

00:12:38.290 --> 00:12:45.279
 4 ext4 또는 유사한 것을 취할 것 

00:12:40.600 --> 00:12:47.500
 지금까지 나는 하나의 드라이브가 있습니다 

00:12:45.279 --> 00:12:50.380
 x FS 포맷 나는 그것을 분할했습니다 

00:12:47.500 --> 00:12:51.010
 전체 4 테라 바이트 파티션이 있습니다. 

00:12:50.380 --> 00:12:53.170
 말하다 

00:12:51.010 --> 00:12:55.330
 7 테라 바이트이고 포맷하고 있습니다 

00:12:53.170 --> 00:12:59.350
 Linux 터미널을 사용하는 XFS 

00:12:55.330 --> 00:13:00.340
 이것은 내가 원하는 이유의 일부가 될 수 있습니다. 

00:12:59.350 --> 00:13:03.550
 터미널에서 이것을 보여주기 위해 

00:13:00.340 --> 00:13:05.860
 이것은 내 X Xu가 될 수 있기 때문에 

00:13:03.550 --> 00:13:10.480
 나는 SSH 주석이 될 수 있으며 이것은 

00:13:05.860 --> 00:13:11.740
 외부 USB에 연결되어 

00:13:10.480 --> 00:13:15.160
 이미 포맷 완료 

00:13:11.740 --> 00:13:17.770
 테라 바이트 당신은 그렇게했다고 믿을 수 있습니까 

00:13:15.160 --> 00:13:19.810
 이제 실제로 마운트 할 수 있습니다. 

00:13:17.770 --> 00:13:24.190
 마운트 지점을 만들었으므로 / mnt 

00:13:19.810 --> 00:13:26.080
 MNT에서 마운트 포인트를 만들자 

00:13:24.190 --> 00:13:29.350
 내가 전화 할게 그냥 전화 할게 

00:13:26.080 --> 00:13:31.090
 쉬운 일이기 때문에 재미를 위해 DB 하나 

00:13:29.350 --> 00:13:33.690
 그 의미를 이해 

00:13:31.090 --> 00:13:35.920
 저는 리눅스를 배우면서 

00:13:33.690 --> 00:13:38.290
 신인 리눅스 사용자 

00:13:35.920 --> 00:13:40.900
 마운트 포인트는 

00:13:38.290 --> 00:13:42.670
 정말 혼란스러워서 

00:13:40.900 --> 00:13:44.380
 전에 마운트 포인트로 작업 한 적이 없습니다 

00:13:42.670 --> 00:13:47.530
 터미널 또는 어떻게 이것이 확실하지 않은지 

00:13:44.380 --> 00:13:49.510
 작품은 질문을 자유롭게하지만 

00:13:47.530 --> 00:13:51.460
 설명하기 위해 최선을 다하겠습니다 

00:13:49.510 --> 00:13:53.590
 리눅스는 말과 다른 방식으로 작동합니다 

00:13:51.460 --> 00:13:55.030
 연결시 Windows Windows가 사용 

00:13:53.590 --> 00:13:57.070
 드라이브에서 그것은 C 드라이브와 같습니다 

00:13:55.030 --> 00:14:00.130
 그것은 당신의 D 드라이브입니다 그것은 당신의 II 드라이브입니다 

00:13:57.070 --> 00:14:02.080
 이제 리눅스에서는 10 개를 꽂을 수 있습니다 

00:14:00.130 --> 00:14:04.000
 드라이브와 드라이브가없는 드라이브 

00:14:02.080 --> 00:14:06.040
 편지 그들은 그들 중 하나처럼 될 수 있습니다 

00:14:04.000 --> 00:14:07.900
 당신의 부츠와 그들 중 하나가 될 수 있습니다 

00:14:06.040 --> 00:14:09.850
 당신의 경로가 될 수 있고 그들 중 하나가 될 수 있습니다 

00:14:07.900 --> 00:14:11.110
 홈 폴더 중 하나가 될 수 있습니다 

00:14:09.850 --> 00:14:14.320
 당신의 백업과 그들은 모두 연결되어 있습니다 

00:14:11.110 --> 00:14:15.820
 파일 시스템 구조를 통해 

00:14:14.320 --> 00:14:20.080
 이 경우 나는 그 하나를 넣어거야 

00:14:15.820 --> 00:14:21.400
 내가 있기 때문에 / mnt 슬래시 stb-1에서 운전 

00:14:20.080 --> 00:14:25.900
 마운트 포인트를 만들었습니다 

00:14:21.400 --> 00:14:28.120
 그 시점에서 일명 폴더이지만 

00:14:25.900 --> 00:14:30.150
 혼란 스러울 수있는 곳은 내가 

00:14:28.120 --> 00:14:33.370
 처음이 물건을 배우기 시작했습니다 

00:14:30.150 --> 00:14:34.870
 내가 지금 DB의 하나에 갈 것입니다 

00:14:33.370 --> 00:14:36.610
 이 폴더를 만들었고 

00:14:34.870 --> 00:14:38.800
 거기에 몇 가지 파일이 있지만 그렇지 않습니다. 

00:14:36.610 --> 00:14:41.350
 심지어 드라이브가 

00:14:38.800 --> 00:14:45.330
 현재 마운트되어있는 모든 파일 

00:14:41.350 --> 00:14:48.070
 실제로 내 SD에 가고있다 

00:14:45.330 --> 00:14:50.710
 내장 하드 드라이브를 

00:14:48.070 --> 00:14:53.770
 아직 연결하지 않았기 때문에 노트북 

00:14:50.710 --> 00:14:56.110
 이 드라이브를 마운트 지점으로 

00:14:53.770 --> 00:14:58.300
 내가 그렇게 할 방법 

00:14:56.110 --> 00:15:00.460
 영구적으로하는 방법이지만 

00:14:58.300 --> 00:15:04.329
 일시적으로 테스트하기 만하면됩니다. 

00:15:00.460 --> 00:15:05.799
 나는 슬래시 개발 슬래시 SDP를 마운트 갈거야 

00:15:04.329 --> 00:15:07.749
 우리는 그것이 우리의 것임을 알고 있기 때문에 

00:15:05.799 --> 00:15:10.480
 해당 드라이브의 첫 번째 파티션 

00:15:07.749 --> 00:15:13.899
 XFS를 포맷 한 다음 마운트합니다 

00:15:10.480 --> 00:15:16.679
 / mnt 슬래시 SD b1 

00:15:13.899 --> 00:15:21.399
 그래서 내가 말하고있는 것은 이것입니다. 

00:15:16.679 --> 00:15:26.079
 이 마운트에 대한 파티션 SD b 하나 

00:15:21.399 --> 00:15:29.439
 포인트 AKA 폴더 SD b 하나의 히트 지금 입력 

00:15:26.079 --> 00:15:32.110
 SD b1에 들어가면 정확히 보입니다. 

00:15:29.439 --> 00:15:36.489
 그러나 내가 여기서하는 일은 

00:15:32.110 --> 00:15:39.879
 실제로 외부 하드에서 진행 

00:15:36.489 --> 00:15:41.889
 하나의 폴더로 돌아 가면 지금 드라이브하십시오. 

00:15:39.879 --> 00:15:46.059
 나는 명령이있는 것을 마운트 해제합니다. 

00:15:41.889 --> 00:15:49.149
 내가 가면 실제로 SD b1을 마운트합니다 

00:15:46.059 --> 00:15:49.509
 다시 stb-1로 돌아가서 LS를 봅니다. 

00:15:49.149 --> 00:15:51.819
 빈 

00:15:49.509 --> 00:15:54.309
 글쎄, 내 파일이 어디로 갔는지 

00:15:51.819 --> 00:15:57.369
 지금은 실제로 SD를보고 있습니다. 

00:15:54.309 --> 00:16:02.889
 다시 장착하고 입력하지 않습니다 

00:15:57.369 --> 00:16:04.839
 내 마운트 명령이 다시 들어갑니다. 

00:16:02.889 --> 00:16:09.129
 사실 외장 하드 드라이브를보고 

00:16:04.839 --> 00:16:13.149
 내가 만든 테스트 파일이 켜져 있도록 

00:16:09.129 --> 00:16:15.220
 내가 본이 불쾌한 첫 번째 드라이브 

00:16:13.149 --> 00:16:19.259
 우리의 섀시에는 외부 섀시가 있습니다 

00:16:15.220 --> 00:16:22.199
 바로 거기에 장착되어 있지 않으면 

00:16:19.259 --> 00:16:24.279
 해당 파일에 액세스 할 수 없습니다 

00:16:22.199 --> 00:16:25.929
 내가 할 수있는 또 다른 일이 있습니다 

00:16:24.279 --> 00:16:29.799
 무엇 때문에 매우 도움이됩니다 

00:16:25.929 --> 00:16:33.279
 SD b1을 마운트 해제하면 

00:16:29.799 --> 00:16:35.410
 이제 괜찮다면 SD가 마운트되지 않습니다. 

00:16:33.279 --> 00:16:38.319
 내가 지금 일어날 수있는 일을 봐 

00:16:35.410 --> 00:16:41.230
 터치 테스트-이제 파일이 있습니다. 

00:16:38.319 --> 00:16:42.819
 돌아가서 test2를 호출하면 

00:16:41.230 --> 00:16:44.220
 마운트 명령을 실행하여 

00:16:42.819 --> 00:16:46.869
 우연히 있다 

00:16:44.220 --> 00:16:52.600
 테스트 2가 있는지 확인하십시오. 

00:16:46.869 --> 00:16:55.329
 지금 SD b1로 가서 LS를 수행하고 

00:16:52.600 --> 00:16:59.049
 도대체 어디에서 테스트했는지 잘 테스트합니다. 

00:16:55.329 --> 00:17:03.220
 나는 내 파일을 잃어 버렸다 

00:16:59.049 --> 00:17:05.260
 테스트 2는 SDA에 있었기 때문에 

00:17:03.220 --> 00:17:07.329
 마운트되지 않았으므로 지금 혼란스러워합니다. 

00:17:05.260 --> 00:17:10.809
 이게 내가 어렸을 때 있었던 곳이야 

00:17:07.329 --> 00:17:13.689
 신인 리눅스 사용자가 아니었다면 

00:17:10.809 --> 00:17:15.429
 마운트 또는 드라이브 마운트를 잊어 버린 경우 

00:17:13.689 --> 00:17:17.350
 또는 올바르게 장착하지 않은 경우 

00:17:15.429 --> 00:17:21.160
 내가 잘못된 곳에 설치했다 

00:17:17.350 --> 00:17:22.390
 마운트 지점에 파일을 마운트 해제했습니다. 

00:17:21.160 --> 00:17:24.460
 그래서 그들은 내 외부에 끝나지 않을 것입니다 

00:17:22.390 --> 00:17:27.190
 왜 그렇게 중요합니까 

00:17:24.460 --> 00:17:30.640
 백업을 실행하면 어떻게됩니까? 

00:17:27.190 --> 00:17:34.420
 내 전 팀에 내 sd 드라이브를 백업 

00:17:30.640 --> 00:17:37.270
 db1이지만 마운트되지 않았습니다. 

00:17:34.420 --> 00:17:41.020
 실제로 내 SD에서 파일을 복사하고 있습니다. 

00:17:37.270 --> 00:17:42.820
 내 SD에 같은 하드 드라이브 그래서 

00:17:41.020 --> 00:17:45.040
 하드 드라이브가 내 백업과 충돌합니다. 

00:17:42.820 --> 00:17:49.000
 쓸데없는 절대적으로 쓸모없는 

00:17:45.040 --> 00:17:52.810
 마운트를 해제하면 어떻게 고칠 수 있습니까? 

00:17:49.000 --> 00:17:55.530
 SD b1을 마운트하므로 

00:17:52.810 --> 00:17:59.590
 마운트 폴더에 있습니다. 

00:17:55.530 --> 00:18:05.230
 test2를 제거하고 다시 가겠습니다 

00:17:59.590 --> 00:18:09.400
 이제이 채터 CH attr plus를보십시오 

00:18:05.230 --> 00:18:13.360
 나는 그것을 불변으로 만든다는 것을 의미합니다. 

00:18:09.400 --> 00:18:17.710
 그때 쓸 수 없도록 

00:18:13.360 --> 00:18:20.980
 SD b1 괜찮아 이제 stb-1에 들어가면 

00:18:17.710 --> 00:18:23.500
 나는 테스트 2를 다시 터치하려고 시도합니다. 

00:18:20.980 --> 00:18:25.480
 그런 파일이나 디렉토리는 무엇입니까 

00:18:23.500 --> 00:18:29.200
 해당 디렉토리에 파일이 있다는 것을 알고 

00:18:25.480 --> 00:18:30.880
 왜 파일을 만질 수 없습니까? 

00:18:29.200 --> 00:18:33.430
 내 디렉토리에 아직 마운드가 없습니다. 

00:18:30.880 --> 00:18:36.790
 내 드라이브를 장착 했으므로 

00:18:33.430 --> 00:18:40.030
 지금은 쓸 수 없기 때문에 그렇게 

00:18:36.790 --> 00:18:41.920
 마운트 포인트에 대한 모든 것 

00:18:40.030 --> 00:18:45.460
 내 백업 만 작동합니다 

00:18:41.920 --> 00:18:47.890
 드라이브가 장착 된 경우 마운트 기능 

00:18:45.460 --> 00:18:49.600
 사실 장착되었으므로 이제 여기로 돌아 갑시다 

00:18:47.890 --> 00:18:52.870
 그것은 불변이다 나는 아무것도 할 수 없다 

00:18:49.600 --> 00:18:55.240
 여기에 디렉토리를 만들 수 없습니다. 

00:18:52.870 --> 00:18:57.220
 작업이 올라갈 수 없다고 말할 것입니다. 

00:18:55.240 --> 00:18:59.200
 폴더와 이제 마운트를 실행하겠습니다 

00:18:57.220 --> 00:19:00.960
 다시 명령 R을 추진하고 명령 

00:18:59.200 --> 00:19:04.270
 내 역사로 돌아가서 

00:19:00.960 --> 00:19:06.040
 이제 잘 고정 된 것을 확인하면 

00:19:04.270 --> 00:19:08.530
 다시 stb-1로 갈 게요 

00:19:06.040 --> 00:19:12.640
 이제 테스트 파일을 볼 수 있습니다 

00:19:08.530 --> 00:19:16.330
 테스트를 터치하여 터치 할 수 없습니다 

00:19:12.640 --> 00:19:18.790
 입력하고 대화 테스트 2를 진행합니다. 

00:19:16.330 --> 00:19:21.820
 지금 당신은 그것이 작동했기 때문에 알 수 있습니다 

00:19:18.790 --> 00:19:24.730
 제대로 장착되어 있으므로 실제로 

00:19:21.820 --> 00:19:27.160
 stb-1 외부 하드 드라이브 

00:19:24.730 --> 00:19:29.710
 마운트되어 있는지 확실하지 않은 경우 

00:19:27.160 --> 00:19:30.700
 이 마운트를보고 그것은 나에게 목록을 제공합니다 

00:19:29.710 --> 00:19:32.790
 잘 장착 된 모든 드라이브 

00:19:30.700 --> 00:19:37.000
 그게 뭉개 지므로 마운트 

00:19:32.790 --> 00:19:39.220
 파이프 그렙 SD 나에게주는 것 

00:19:37.000 --> 00:19:42.960
 stb-1을 표시하는 한 줄이므로 

00:19:39.220 --> 00:19:44.170
 dev stb-1이 마운트되었음을 ​​보여줍니다. 

00:19:42.960 --> 00:19:46.450
 / mnt 

00:19:44.170 --> 00:19:49.510
 SDP 하나를 슬래시합니다. 

00:19:46.450 --> 00:19:52.600
 마운트를 해제하고 똑같이 실행하십시오 

00:19:49.510 --> 00:19:55.330
 출력되지 않기 때문에 명령이 출력되지 않습니다 

00:19:52.600 --> 00:19:58.390
 현재 마운트되어 있으므로 

00:19:55.330 --> 00:20:02.050
 다시 해봐 

00:19:58.390 --> 00:20:04.720
 거기서 우리는 이제 그 명령을 실행합니다. 

00:20:02.050 --> 00:20:06.460
 그것은 그것을 제공하는 마운트입니다 

00:20:04.720 --> 00:20:09.040
 나에게 탑재 된 모든 것들의 결과물 

00:20:06.460 --> 00:20:10.870
 맞아하지만 나는 어느 

00:20:09.040 --> 00:20:14.050
 기본적으로 Linux와 동등한 

00:20:10.870 --> 00:20:15.640
 이 SD의 출력을 1로 검색하고 

00:20:14.050 --> 00:20:17.380
 Enter 키를 누르면 내가 될 수있는 것 

00:20:15.640 --> 00:20:18.880
 dev를 검색하면 나에게 줄 것입니다. 

00:20:17.380 --> 00:20:20.890
 dev라는 단어가 포함 된 모든 것 

00:20:18.880 --> 00:20:23.440
 글쎄 아니, 난 내가 원하는 걸 필요 없어 

00:20:20.890 --> 00:20:24.910
 SDP 하나 그리고 그것은 저를 제공합니다 

00:20:23.440 --> 00:20:26.440
 내가 좋아할 때 약간 혼란 

00:20:24.910 --> 00:20:29.770
 하지만 거기에 당신은 볼 수 있도록 이동 

00:20:26.440 --> 00:20:33.340
 MN t / stb-1에 대한 DB 하나를 가지고 있다는 것을 

00:20:29.770 --> 00:20:35.830
 유형은 내 파일 인 XFS입니다. 

00:20:33.340 --> 00:20:39.480
 시스템과 갈 준비가되어 있으므로 

00:20:35.830 --> 00:20:41.650
 내 Nass에 갈 준비가 된 첫 번째 드라이브 

00:20:39.480 --> 00:20:44.620
 두 번째 드라이브는 정확히 

00:20:41.650 --> 00:20:46.420
 우리는 그것이 내 SDC라는 것을 알고는 

00:20:44.620 --> 00:20:49.840
 같은 단계를 순서대로 진행합니다 

00:20:46.420 --> 00:20:54.190
 이것이 아니기 때문에 지금 만들려면 

00:20:49.840 --> 00:20:56.500
 4 테라 바이트 드라이브에 넣을 수있는 공격대 

00:20:54.190 --> 00:20:58.740
 나도 할 수있는 2 개의 테라 바이트 드라이브가 있습니다 

00:20:56.500 --> 00:21:02.320
 그 외에 1 테라 바이트를 넣으십시오 

00:20:58.740 --> 00:21:05.560
 500 기가를 넣어서 사용할 수 있습니다 

00:21:02.320 --> 00:21:10.780
 드라이브의 믹스와 각각의 것 

00:21:05.560 --> 00:21:15.070
 TB SDC s de D로 표시됩니다. 

00:21:10.780 --> 00:21:17.620
 그리고 E 그리고 당신은 

00:21:15.070 --> 00:21:20.290
 습격으로 그들 각각에 액세스 

00:21:17.620 --> 00:21:21.730
 물론 4 테라 바이트가 필요하다면 

00:21:20.290 --> 00:21:22.870
 잘 당신은 그들을 공격대로 설정할 수 있습니다 1 

00:21:21.730 --> 00:21:24.910
 하지만 1 테라 바이트가 있다면 

00:21:22.870 --> 00:21:26.710
 충분하지 않은 500 기가 바이트 

00:21:24.910 --> 00:21:29.350
 정말로 그것들을 연결하고 사용하십시오 

00:21:26.710 --> 00:21:31.630
 우리가 겪을 일 

00:21:29.350 --> 00:21:34.360
 이 시리즈의 과정은 우리가 

00:21:31.630 --> 00:21:37.989
 실제로 어떻게 사용할 수 있는지 시연 

00:21:34.360 --> 00:21:40.929
 본 기기 또는 이와 유사한 기기 

00:21:37.989 --> 00:21:44.679
 리눅스를 사용하여 배열을 만들려면 

00:21:40.929 --> 00:21:46.570
 내가 섞을 수있는 도구 

00:21:44.679 --> 00:21:48.879
 중복성을 만들 수있는 드라이브 

00:21:46.570 --> 00:21:51.009
 우리는 온갖 종류를 창조 할 것입니다 

00:21:48.879 --> 00:21:53.470
 당신이 할 수 있도록 정말 멋진 물건 

00:21:51.009 --> 00:21:55.269
 기본 파일 시스템 이해 

00:21:53.470 --> 00:21:57.039
 특질과 나는 오늘 밤 생각 

00:21:55.269 --> 00:21:58.600
 몇 가지를 배웠을 수도 있습니다 

00:21:57.039 --> 00:22:00.519
 아래에 의견을 남겨주세요 

00:21:58.600 --> 00:22:03.129
 당신은 여기에서 그리고 무엇이든 배웠습니다 

00:22:00.519 --> 00:22:06.700
 내가 관심을 가지고있는 것은 

00:22:03.129 --> 00:22:07.690
 오늘 밤 그리고 

00:22:06.700 --> 00:22:09.279
 우리는 시리즈의 과정 

00:22:07.690 --> 00:22:12.970
 그런 것들을 배우는 것 

00:22:09.279 --> 00:22:15.489
 같은 뒤에 작은 장신구 

00:22:12.970 --> 00:22:19.509
 우리가 좋아하는 UI 

00:22:15.489 --> 00:22:21.849
 Nass의 인터페이스처럼 설치 

00:22:19.509 --> 00:22:23.139
 단위와 우리가 보는 모든 것은 웹입니다 

00:22:21.849 --> 00:22:24.489
 인터페이스 잘 우리가 일 할거야 

00:22:23.139 --> 00:22:26.830
 우리가 어떻게 이해할 수 있도록 후드 아래 

00:22:24.489 --> 00:22:29.139
 모든 것이 작동하고 데이터를 안전하게 유지 

00:22:26.830 --> 00:22:32.019
 꽤 멋지네요 

00:22:29.139 --> 00:22:34.769
 정말 빨리 쉬어 내가 옳을거야 

00:22:32.019 --> 00:22:34.769
 다시 스틱 

00:22:34.960 --> 00:22:42.739
 [음악] 

00:22:48.370 --> 00:22:51.500
 [음악] 

00:22:52.499 --> 00:22:58.419
 다시 환영합니다. 이것은 카테고리 5입니다. 

00:22:54.820 --> 00:22:59.619
 테크놀로지 TV 지금 우리 방송은 생방송 

00:22:58.419 --> 00:23:01.149
 이걸보고 있어도 

00:22:59.619 --> 00:23:04.330
 몇 가지 질문이 있습니다 

00:23:01.149 --> 00:23:06.759
 우리의 불화 채팅 첫 번째 질문에서 

00:23:04.330 --> 00:23:08.919
 마쉬 맨은 어떻게 오냐고 묻습니다. 

00:23:06.759 --> 00:23:10.389
 연결 시연중인 노트북 

00:23:08.919 --> 00:23:11.589
 NASA에 지금은 그것을 언급했다 

00:23:10.389 --> 00:23:14.229
 공연의 최고이지만 당신은 가지고 있지 않을 수도 있습니다 

00:23:11.589 --> 00:23:16.119
 그것을 잡았다 그리고 난 그냥거야 

00:23:14.229 --> 00:23:17.320
 내가 마운트 해제했기 때문에 전원을 끕니다 

00:23:16.119 --> 00:23:18.639
 당신은 내가 마운트 명령으로 그것을 

00:23:17.320 --> 00:23:20.229
 전원 버튼을 누르고 

00:23:18.639 --> 00:23:21.579
 드라이브를 끄고 안전하게 

00:23:20.229 --> 00:23:23.619
 거기로 이동 

00:23:21.579 --> 00:23:24.940
 이들은 회전 드라이브임을 기억 

00:23:23.619 --> 00:23:26.109
 당신은 이걸 움직이고 싶지 않아요 

00:23:24.940 --> 00:23:27.969
 그들은 당신이 할 수 있기 때문에 회전 

00:23:26.109 --> 00:23:30.070
 실제로 물리적 손상을 야기 

00:23:27.969 --> 00:23:32.139
 드라이브의 플래터에는 바늘이 있습니다. 

00:23:30.070 --> 00:23:33.969
 기본적으로 우리는 그들을 생각 

00:23:32.139 --> 00:23:37.299
 레코드 플레이어와 같은 오래된 레코드 

00:23:33.969 --> 00:23:39.249
 LPS 당신은 위에 떠오르는 머리를 가지고 있습니다. 

00:23:37.299 --> 00:23:41.919
 위에 아주 작은 공기 쿠션 

00:23:39.249 --> 00:23:44.739
 매우 민감한 자기 플래터이므로 

00:23:41.919 --> 00:23:48.579
 전원이 켜져있는 동안 이동 

00:23:44.739 --> 00:23:52.509
 플래터는 7,200 회전으로 움직입니다 

00:23:48.579 --> 00:23:54.389
 분당 그래서 내가 그런 이동하면 

00:23:52.509 --> 00:23:57.940
 머리가 플래터에 닿는 방식 

00:23:54.389 --> 00:24:00.279
 스크래치 데이터 손실 가능 하드 드라이브 

00:23:57.940 --> 00:24:03.129
 고장 난 항상 전원을 끕니다 

00:24:00.279 --> 00:24:07.179
 이동하기 전에 어떻게 연결합니까 

00:24:03.129 --> 00:24:10.179
 난 그냥 여기에 전원을 분리 해요 

00:24:07.179 --> 00:24:14.559
 장치의 뒷면이며 내가 가진 모든 것 

00:24:10.179 --> 00:24:18.549
 USBC 케이블은 괜찮습니다. 

00:24:14.559 --> 00:24:22.089
 이 끝은 지금 랩톱 끝입니다 

00:24:18.549 --> 00:24:24.369
 여기에서 플러그를 뽑을 것입니다. 

00:24:22.089 --> 00:24:27.999
 같은 케이블의 다른 쪽 끝으로 

00:24:24.369 --> 00:24:30.789
 USB C와 USB가있어서 

00:24:27.999 --> 00:24:35.859
 랩톱이나 다른 장치에 연결해야합니다. 

00:24:30.789 --> 00:24:37.989
 내 Odroid xu4 인 USB 3.0 장치 

00:24:35.859 --> 00:24:41.259
 그것이 우리가 달성하고자하는 것입니다 

00:24:37.989 --> 00:24:43.359
 이 프로젝트의 과정을 통해 

00:24:41.259 --> 00:24:44.529
 실제로 이것을 단일 전원으로 

00:24:43.359 --> 00:24:46.749
 내가 한 이유는 보드 컴퓨터 

00:24:44.529 --> 00:24:47.800
 선택한 xu4는 

00:24:46.749 --> 00:24:50.320
 당신은 asp 

00:24:47.800 --> 00:24:52.360
 저것은 USB에 의하여 부착되는 수수께끼 같은 프로토콜입니다 

00:24:50.320 --> 00:24:55.840
 그것은 얻을 수 있다는 것을 의미합니다 

00:24:52.360 --> 00:24:59.200
 초당 5 기가비트 데이터 전송 

00:24:55.840 --> 00:25:01.240
 표준 USB와 달리 장치에 

00:24:59.200 --> 00:25:03.970
 당신이보고있는 것보다 훨씬 빨라질 것입니다 

00:25:01.240 --> 00:25:05.830
 공정한 비율이 더 많으므로 

00:25:03.970 --> 00:25:07.180
 나는 이것이 ssh가 아니라 연결되었다 

00:25:05.830 --> 00:25:10.390
 연결 또는 이와 같은 것 

00:25:07.180 --> 00:25:13.840
 바로 같은 USB 직접 연결 

00:25:10.390 --> 00:25:16.060
 그것은 우리의 Odroid xu와 함께있을 것입니다. 

00:25:13.840 --> 00:25:17.620
 나는 그것을 보지 않고 Odroid xu 

00:25:16.060 --> 00:25:20.380
 오늘 밤 나는 실제로 이것을하고있다 

00:25:17.620 --> 00:25:23.250
 내 노트북을 사용하는 것은 엄밀히 말해서 

00:25:20.380 --> 00:25:26.500
 데모 중 이것은 일련의 

00:25:23.250 --> 00:25:29.410
 시연 및 프로젝트 

00:25:26.500 --> 00:25:33.160
 내 엉덩이로 이끄는 

00:25:29.410 --> 00:25:36.820
 고양이 다섯 점 TV /-그것이 전부입니다 

00:25:33.160 --> 00:25:39.550
 함께 올 수 있지만 Xu 4는 

00:25:36.820 --> 00:25:41.620
 의 단계 중 하나가 될 것입니다 

00:25:39.550 --> 00:25:42.760
 이 단위를 만드는 과정이지만 

00:25:41.620 --> 00:25:45.220
 당신에게 종류를 보여주고 싶었다 

00:25:42.760 --> 00:25:46.720
 우리가 될 기초 

00:25:45.220 --> 00:25:49.600
 설정하고 난 당신이 원하는 

00:25:46.720 --> 00:25:51.400
 이 작은 것의 일부를 배우십시오 

00:25:49.600 --> 00:25:52.660
 리눅스 명령은 터미널에서 다음과 같이 작동합니다 

00:25:51.400 --> 00:25:54.520
 모든 것이 끝날 것이기 때문에 

00:25:52.660 --> 00:25:58.510
 터미널에서 다른 질문 

00:25:54.520 --> 00:26:01.570
 우리 bp9 당신은 foo를 매우 환영합니다 

00:25:58.510 --> 00:26:03.940
 이것을 호출-예 지금이 

00:26:01.570 --> 00:26:08.440
 이 인스턴스에서 이것을 즉석에서 

00:26:03.940 --> 00:26:10.600
 직접 연결된 스토리지 아이디어는 

00:26:08.440 --> 00:26:14.710
 우리는 이것을 취할 것입니다-단위 

00:26:10.600 --> 00:26:17.800
 의사 NAS 또는 백업으로 전환 

00:26:14.710 --> 00:26:20.290
 Xu 4를 사용하는 시스템은 Xu 4가 

00:26:17.800 --> 00:26:21.820
 이것의 두뇌가되고 

00:26:20.290 --> 00:26:24.430
 그런 다음 액세스 할 수있게됩니다 

00:26:21.820 --> 00:26:25.930
 네트워크 연결 스토리지로 

00:26:24.430 --> 00:26:27.820
 내 노트북에 연결해야 

00:26:25.930 --> 00:26:31.240
 내가 접근 할 수 있다는 걸 알아 

00:26:27.820 --> 00:26:33.010
 이더넷을 통한 Wi-Fi 및 

00:26:31.240 --> 00:26:34.870
 다른 것들을 그리워 했어 

00:26:33.010 --> 00:26:37.170
 질문 이제 대화방을보고 있어요 

00:26:34.870 --> 00:26:40.150
 내 휴대 전화에서 화면이 

00:26:37.170 --> 00:26:42.400
 비교적 작은 경우 

00:26:40.150 --> 00:26:44.560
 화면에 의해 날아가는 경향이 있으므로 

00:26:42.400 --> 00:26:46.240
 에 대한 다른 질문이 있습니다 

00:26:44.560 --> 00:26:50.020
 프로젝트 또는 내가 여기서 가르치는 것 

00:26:46.240 --> 00:26:53.500
 오늘 밤 나는 크게 봤다. 

00:26:50.020 --> 00:26:56.590
 여러분 모두 여기와 주셔서 감사합니다 

00:26:53.500 --> 00:27:02.170
 여기 나는 그것이 정말로 

00:26:56.590 --> 00:27:04.240
 주된 질문 I bp9 yeah okay so you 

00:27:02.170 --> 00:27:06.670
 내가 어떻게 할 수 있었는지 궁금해 

00:27:04.240 --> 00:27:08.740
 NASS 장치에 직접 연결 

00:27:06.670 --> 00:27:10.810
 엉덩이가 아니기 때문에 

00:27:08.740 --> 00:27:12.880
 foo는 직접 첨부되어 있다고 말합니다. 

00:27:10.810 --> 00:27:15.580
 이 인스턴스의 스토리지는 모두 

00:27:12.880 --> 00:27:17.140
 그래도 바뀌고 

00:27:15.580 --> 00:27:19.810
 넌 X에 익숙하지 않아 

00:27:17.140 --> 00:27:21.760
 Droid X는 마이크로 컴퓨터이므로 

00:27:19.810 --> 00:27:23.770
 라즈베리 파이를 생각하면 

00:27:21.760 --> 00:27:26.710
 작은 컴퓨터가 제 주머니에 딱 맞습니다 

00:27:23.770 --> 00:27:29.410
 여기에 나와 함께 있었으면 좋겠지 만 거기에 

00:27:26.710 --> 00:27:31.870
 실례지만 실례 할 수 있다면 

00:27:29.410 --> 00:27:35.320
 순간 하나를 가질 수있어 

00:27:31.870 --> 00:27:39.010
 여기에 세트에서 우리는 그래서이 

00:27:35.320 --> 00:27:40.390
 Q에는 droid Xu가 없으며 Q는 

00:27:39.010 --> 00:27:43.750
 이 거대한이 있기 때문에 조용 

00:27:40.390 --> 00:27:46.720
 방열판 그래서 이것은 보드입니다 

00:27:43.750 --> 00:27:49.000
 우리의 nass 유닛에 전원을 공급할 때 

00:27:46.720 --> 00:27:51.580
 이것은이 될 엉덩이가된다 

00:27:49.000 --> 00:27:54.310
 컴퓨터가 갈 두뇌 

00:27:51.580 --> 00:27:57.400
 데비안 리눅스 데비안 10 

00:27:54.310 --> 00:27:59.560
 여기에 마이크로 SD가 있습니다. 

00:27:57.400 --> 00:28:01.660
 emmc에있을 것입니다 그리고 우리는거야 

00:27:59.560 --> 00:28:04.960
 장착 형태를 설정하다 

00:28:01.660 --> 00:28:07.840
 이런 식으로 숨기려면 

00:28:04.960 --> 00:28:09.340
 그것은 유닛 자체의 일부가 될 것입니다 

00:28:07.840 --> 00:28:12.490
 우리가 넣을 수있는 것 

00:28:09.340 --> 00:28:14.110
 당신의 방은 당신이 알고 

00:28:12.490 --> 00:28:15.640
 옷장이나 설정할 수있는 것 

00:28:14.110 --> 00:28:18.400
 이더넷 케이블 만 연결하면됩니다 

00:28:15.640 --> 00:28:20.290
 여기에 기가비트 이더넷이있는 

00:28:18.400 --> 00:28:21.730
 당신에게 모든에 대한 모든 액세스 권한을 줄거야 

00:28:20.290 --> 00:28:23.560
 파일을 백업하고 

00:28:21.730 --> 00:28:27.610
 감사합니다 

00:28:23.560 --> 00:28:29.230
 질문 다들 다 환영합니다 I 

00:28:27.610 --> 00:28:33.130
 이메일로 질문을 환영합니다 

00:28:29.230 --> 00:28:35.820
 만약 당신이 카테고리 5 도트 TV에 살고 

00:28:33.130 --> 00:28:35.820
 더 이상 가지고 

