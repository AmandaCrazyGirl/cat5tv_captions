WEBVTT
Kind: captions
Language: de

00:00:01.520 --> 00:00:07.200
 Wenn Sie noch nie zu einer Kaffeepause in der Kategorie 5 gekommen sind, werden Sie es tun 

00:00:07.200 --> 00:00:11.490
 Weitere Informationen finden Sie unter Punkt-TV der Kategorie fünf. Scrollen Sie einfach auf der Startseite nach unten 

00:00:11.490 --> 00:00:15.570
 und Sie werden die Community-Kaffeepause dort zusammen mit unserem Zeitplan sehen, wenn 

00:00:15.570 --> 00:00:19.920
 Wir werden das nächste machen, es ist ein wöchentliches Ereignis, das wir auf Zoom halten. ' 

00:00:19.920 --> 00:00:23.430
 und es ist eine Gelegenheit für unsere Gemeinschaft, zusammenzukommen und sogar 

00:00:23.430 --> 00:00:29.189
 obwohl wir alle erleben, was wir heute in unserer Welt erleben 

00:00:29.189 --> 00:00:35.370
 nahm den Ansatz, eher zu sagen, als über diese Dinge die Dinge zu sprechen 

00:00:35.370 --> 00:00:40.260
 Das bringt uns jetzt runter. Schauen wir es uns an und sagen, wir sind alle 

00:00:40.260 --> 00:00:47.039
 in dieser Situation stecken geblieben, was ist es, was ich tue, was mich aufgeregt hat 

00:00:47.039 --> 00:00:52.010
 Was ist es, mit dem ich technologisch experimentiere? 

00:00:52.010 --> 00:00:56.489
 Interessant für mich und hilft mir, Zeit zu verbringen, ob ich zu Hause festsitze 

00:00:56.489 --> 00:01:03.989
 gerade jetzt oder was auch immer der Fall sein mag, so kam das Thema über Github auf, weil 

00:01:03.989 --> 00:01:10.380
 Wir sprechen über Programmierung und Peter ist fast jedes Mal für eine da 

00:01:10.380 --> 00:01:14.580
 Kaffeepause in der Gemeinde und Peter fragte gut, wie man Github gut benutzt 

00:01:14.580 --> 00:01:18.750
 Nicht wirklich sie sind das, was wir zeigen oder reden können 

00:01:18.750 --> 00:01:22.799
 durch in der Kaffeepause, aber es kam heraus, dass hey gut, das wäre ein wirklich 

00:01:22.799 --> 00:01:27.330
 gutes Thema, um auf Technologie-TV der Kategorie fünf zu diskutieren und den Grund dafür 

00:01:27.330 --> 00:01:34.350
 kam anfangs, weil Microsoft, als es Github kaufte, es behielt 

00:01:34.350 --> 00:01:39.570
 Es ging sozusagen in den Status Quo und man musste für bestimmte Features aber bezahlen 

00:01:39.570 --> 00:01:48.240
 dann plötzlich vor kurzem sagte Microsoft und alle, die für Funktionen bezahlt haben, nicht 

00:01:48.240 --> 00:01:51.899
 Alle, aber viele von denen, die für Funktionen bezahlt wurden, die Sie früher bezahlen mussten 

00:01:51.899 --> 00:01:55.500
 denn sie sind jetzt frei, also nehmen sie den Dienst in Anspruch und sie sind im Grunde genommen 

00:01:55.500 --> 00:02:00.659
 Verschenken Sie ihren Premium-Service absolut kostenlos bei github com 

00:02:00.659 --> 00:02:06.600
 github gut github ist ein bisschen wie ein Cloud-Dienstleister, aber es ist für 

00:02:06.600 --> 00:02:10.800
 Entwicklern hilft es uns, unsere Projekte so zu verwalten, dass Sie gehen können 

00:02:10.800 --> 00:02:15.050
 zurück in der Zeit im Grunde mit Code und es ist wirklich hilfreich, in der Lage zu sein 

00:02:15.050 --> 00:02:20.540
 Sehen Sie sich diese Commits an und sehen Sie, wie sich Änderungen auf Ihr Projekt ausgewirkt haben 

00:02:20.540 --> 00:02:26.330
 Ein großartiger Speichermechanismus für Ihren Code, da Sie ihn mit anderen teilen können 

00:02:26.330 --> 00:02:30.350
 andere Leute, wenn Sie jetzt natürlich Microsoft kostenlos machen wollen 

00:02:30.350 --> 00:02:37.640
 Sie können jetzt auch kostenlose private Repositories haben und diese einrichten 

00:02:37.640 --> 00:02:41.300
 so viele Teams wie Sie möchten, wenn Sie aber mit anderen Programmierern zusammenarbeiten möchten 

00:02:41.300 --> 00:02:45.920
 Im Wesentlichen bedeutet dies für mich, dass ich meinen Code online in teilen kann 

00:02:45.920 --> 00:02:49.459
 so dass andere Leute es Open Source verwenden können, können sie es kompilieren oder verwenden 

00:02:49.459 --> 00:02:55.459
 es oder laufen es auf ihren eigenen Computern und wenn sie sich dann entscheiden, na ja, würde ich lieber 

00:02:55.459 --> 00:02:59.510
 es funktioniert so oder vielleicht ist hier ein Fehler und ich kann beheben, dass sie tun können, was 

00:02:59.510 --> 00:03:05.390
 eine Pull-Anfrage genannt, so klonen sie im Grunde mein Github-Repository meine Software 

00:03:05.390 --> 00:03:10.730
 Code, den sie auf ihrem Computer reparieren, und dann machen sie eine Pull-Anfrage, die pusht 

00:03:10.730 --> 00:03:16.100
 es zurück, während sie es zurück zu ihrer Gabel schieben, und dann erzeugt es eine Pull-Anfrage 

00:03:16.100 --> 00:03:21.709
 für mich, damit ich sehe, dass hey Joe über ihre Behebung dieses Fehlers mit meinem hinwegblasen wird 

00:03:21.709 --> 00:03:26.720
 Software Ich kann auf eine Schaltfläche klicken und es wird das Update so in meine Software importieren 

00:03:26.720 --> 00:03:33.890
 Es steckt eine Menge dahinter und es ist wirklich sehr mächtig, wie es sein kann 

00:03:33.890 --> 00:03:37.519
 verwirrend, besonders wenn Sie anfangen, sie und jene zu zerquetschen und zu verschmelzen 

00:03:37.519 --> 00:03:41.390
 Dinge, auf die wir heute nicht eingehen werden, aber was ich will 

00:03:41.390 --> 00:03:47.150
 Zeigen Sie, wie das grundlegendste Wissen darüber, wie es funktioniert, funktionieren wird 

00:03:47.150 --> 00:03:53.720
 Ermöglichen Sie es Ihnen, Github effektiv zu nutzen. Stellen Sie sich das als das vor, wo Sie sich befinden 

00:03:53.720 --> 00:03:58.519
 Stellen Sie Ihren Code als Open-Source-Software bereit und müssen es nicht sein 

00:03:58.519 --> 00:04:03.470
 Sie können es privat haben, wenn Sie wollen, aber in meinem Fall ist es das, was ich tue, was ich will 

00:04:03.470 --> 00:04:07.130
 Leute, die gelegentlich mit mir zusammenarbeiten, werden vielleicht Probleme posten 

00:04:07.130 --> 00:04:10.430
 Wenn sie einen Fehler finden und dann bin ich immer noch die Person, die ihn beheben muss, aber bei 

00:04:10.430 --> 00:04:15.590
 Zumindest kommt meine Community in mein Software-Repository und sagt, dies sei eine 

00:04:15.590 --> 00:04:21.769
 Problem und Sie müssen es in Ordnung bringen, damit Github Ruhe ist, wohin Sie gehen, ist Zeichen 

00:04:21.769 --> 00:04:26.360
 Für Ihr kostenloses Konto müssen Sie lediglich auf den Link klicken und auf klicken 

00:04:26.360 --> 00:04:30.080
 Jetzt anmelden Ich habe bereits ein Konto und werde mich als ich selbst anmelden 

00:04:30.080 --> 00:04:37.789
 und melden Sie sich an, damit Sie hier sehen können, ob ich zu meinen Repositories gehe, wenn ich springe 

00:04:37.789 --> 00:04:47.569
 nach Hause hier und geh, um es hier laden zu lassen, lass es in Ordnung laden Ich werde einfach gehen 

00:04:47.569 --> 00:04:56.000
 Direkt zu Cat 5 TV hoste ich meine gesamte Software, damit Sie dorthin gehen können 

00:04:56.000 --> 00:04:58.909
 github.com slash cat 5 TV und Sie sehen, wie das funktioniert 

00:04:58.909 --> 00:05:02.779
 Sie können also sehen, dass ich eine Menge Software-Repositorys habe und sie alle sind 

00:05:02.779 --> 00:05:07.099
 verschiedene Projekte alle verschiedene Dinge, die ich getan habe oder die ich fortsetze 

00:05:07.099 --> 00:05:12.889
 zu tun und es gibt Seiten und Seiten und Seiten davon, sobald Sie Ihren Github haben 

00:05:12.889 --> 00:05:19.340
 Konto können Sie sich bei dem anmelden, was Sie hier sehen, was aber meine Repositorys-Liste ist 

00:05:19.340 --> 00:05:23.090
 Wenn Sie sich zum ersten Mal anmelden, werden Sie nicht alle diese Elemente haben, die Sie erstellen müssen 

00:05:23.090 --> 00:05:26.750
 Ihr erstes Repository, so wie ich das jetzt machen werde, verstehen 

00:05:26.750 --> 00:05:33.289
 github ist nicht erforderlich vergiss ok und git ist nicht dasselbe wie github github ist ein 

00:05:33.289 --> 00:05:39.919
 Online-Service und betrachten Sie es als Cloud-Speicher vergessen ok, es ist nicht das gleiche 

00:05:39.919 --> 00:05:46.400
 Was es ist ein Online-Speicher für dieses Open-Source-Paketverwaltungstool oder ein 

00:05:46.400 --> 00:05:50.960
 Projektmanagement-Tool also hier auf Github haben sie es wirklich wirklich gemacht 

00:05:50.960 --> 00:05:55.400
 Einfach gesagt, neues Repository, also bin ich zu meinen Repositories gegangen und habe 

00:05:55.400 --> 00:05:59.360
 klickte auf neu und dann werde ich ihm einen Namen geben, den ich so nennen werde 

00:05:59.360 --> 00:06:07.419
 Bei einem meiner Unterstrich-Tests und einer optionalen Beschreibung handelt es sich um einen Test für die Show 

00:06:07.419 --> 00:06:12.800
 ob Sie möchten, dass es öffentlich oder privat ist, und initialisieren Sie es dann mit a 

00:06:12.800 --> 00:06:17.029
 readme es ist immer am besten, das zu tun, damit die Leute darauf zugreifen können 

00:06:17.029 --> 00:06:20.839
 Sie möchten sofort eine Lizenz hinzufügen, wenn Sie eine hinzufügen möchten 

00:06:20.839 --> 00:06:24.740
 Ich werde beide leer lassen. Du wirst herausfinden, was das bedeutet 

00:06:24.740 --> 00:06:30.680
 die Zukunft und erstellen Sie Ihr Repository, so dass ich jetzt einen namens Unterstrich Test habe 

00:06:30.680 --> 00:06:34.459
 aber da ist nichts und ich bin mit dem Browser fertig, also jetzt was ich gehe 

00:06:34.459 --> 00:06:39.830
 zu tun ist, ich werde mein Terminal aufrufen und in meinem Terminal werde ich 

00:06:39.830 --> 00:06:43.320
 Geben Sie get okay ein, damit Sie sehen können, dass ich 

00:06:43.320 --> 00:06:48.330
 Ich habe es bereits installiert, wenn Sie es nicht installiert haben. Ich bin also unter Linux 

00:06:48.330 --> 00:06:53.460
 Debian Linux hier können Sie apt install git eingeben, das ist, was Sie gehen werden 

00:06:53.460 --> 00:07:05.640
 Typ Ich bin nicht unhöflich sudo su eingeloggt ist rock ok apt install noch wird es sagen 

00:07:05.640 --> 00:07:09.660
 mir, dass ich schon den Strom habe oh es gibt ein nein nein ich habe es schon 

00:07:09.660 --> 00:07:13.500
 Es gibt zwar andere Updates für mich, aber get ist schon die neueste Version also 

00:07:13.500 --> 00:07:17.430
 Wenn Sie es nicht haben, müssen Sie es installieren, wenn Sie auf einer RPM-Basis arbeiten 

00:07:17.430 --> 00:07:22.980
 System wird es yum install git sein und Sie können es auch in Ihrer GUI finden 

00:07:22.980 --> 00:07:28.740
 Repository-Manager Ihr Paket-Manager oder was auch immer Sie verwenden, wie eine synaptische 

00:07:28.740 --> 00:07:33.750
 Paketmanager zum Beispiel, wenn Sie installiert sind, erstellen Sie einen Ordner 

00:07:33.750 --> 00:07:41.100
 wahrscheinlich in deinem Home-Ordner und wir werden diese Repositories nur so aufrufen, dass ich 

00:07:41.100 --> 00:07:46.290
 Ich habe einen Ort, an dem ich immer weiß, dass mein Code richtig ist, also wird dies ein 

00:07:46.290 --> 00:07:52.650
 lokale Kopie meines Git-Repositorys, also werde ich jetzt Git-Klon eingeben und wir sind 

00:07:52.650 --> 00:08:00.210
 Ich werde diese URL kopieren. github.com slash cat 5 TV slash mein Unterstrich-Test, damit ich kann 

00:08:00.210 --> 00:08:08.010
 Kopieren Sie, dass Sie sich nur mit Strg + C daran gewöhnen werden, es einfach zu tippen 

00:08:08.010 --> 00:08:13.560
 Der Benutzername schneidet Ihr Repository auf und jetzt, wenn ich mir mein Dateisystem anschaue, ist es so 

00:08:13.560 --> 00:08:20.760
 geklont get clone und dann den Namen des oder die URL des Repositorys also jetzt 

00:08:20.760 --> 00:08:25.920
 Wenn ich in meinen Home-Ordner gehe und dann in Repositorys gehe, merke ich, dass er Root gehört 

00:08:25.920 --> 00:08:31.740
 weil ich Super User Dude zu verklagen sehe, gibt es jetzt einen Ordner namens mein Test und 

00:08:31.740 --> 00:08:38.250
 In meinem Test gibt es eine Datei namens Readme MD, also in diesem Ordner, also bin ich 

00:08:38.250 --> 00:08:43.250
 Ich werde in meinen Test gehen und eine neue Datei erstellen, die ich so nennen werde 

00:08:43.250 --> 00:08:50.970
 nano test dot SH und wir erstellen eine schnelle SH-Datei, um ein Bash-Skript auszuführen und 

00:08:50.970 --> 00:08:55.640
 Ich werde echo hallo da tippen, wie ist das oh ich sollte wirklich 

00:08:55.640 --> 00:09:00.970
 Bleib bei der Norm Hallo Welt, wie ist das in Ordnung? 

00:09:00.970 --> 00:09:05.690
 Also habe ich das ausgeschrieben und es geschlossen. Jetzt sehen Sie, dass eine Datei namens heißt 

00:09:05.690 --> 00:09:13.910
 test dot s H jetzt, wenn ich eine Datei auf github übertrage, sind die Berechtigungen 

00:09:13.910 --> 00:09:18.500
 wird in diesem Push enthalten sein, wenn ich also einen Punkt-Schrägstrich-Test mache, dann 

00:09:18.500 --> 00:09:23.360
 Beachten Sie, dass es heißt, dass die Erlaubnis verweigert wurde. Ich muss es zum Executive Executive machen 

00:09:23.360 --> 00:09:30.680
 plus x Testpunkt s H also jetzt, wenn ich Testpunkt s HS s Hallo Welt tippe, also ich jetzt 

00:09:30.680 --> 00:09:35.510
 Habe mein erstes Skript bereit, um zu Github zu gelangen, es ist Teil von mir 

00:09:35.510 --> 00:09:41.870
 Repository auf meinem lokalen Computer, aber es ist noch nicht in Github, wenn Sie sich das ansehen 

00:09:41.870 --> 00:09:45.500
 github Ich werde aktualisieren, nur um zu beweisen, dass Sie Ihre Dateiliste hier und sehen 

00:09:45.500 --> 00:09:50.390
 Es gibt immer noch nur die Readme-Datei, also werde ich jetzt wieder in meinem Terminalfenster sein 

00:09:50.390 --> 00:09:56.330
 Verwenden Sie wieder diesen Git-Befehl. Ich werde Stern in den Repositories hinzufügen 

00:09:56.330 --> 00:10:01.270
 Ordner, der besagt, finden Sie alle Dateien, die Änderungen haben, und fügen Sie sie hinzu 

00:10:01.270 --> 00:10:09.680
 Commit - bin und dann in Anführungszeichen geben Sie Ihrem Commit einen Namen, also werde ich sagen 

00:10:09.680 --> 00:10:14.480
 Mein erstes Skript und dies sind nur kurze kleine Beschreibungen und drücken Sie die Eingabetaste und 

00:10:14.480 --> 00:10:19.220
 Jetzt heißt es, hey, du musst uns sagen, wer du bist, weil du es noch nie getan hast 

00:10:19.220 --> 00:10:24.380
 Führen Sie git auf diesem Computer aus, bevor Sie diese beiden Befehle hübsch ausführen müssen 

00:10:24.380 --> 00:10:29.030
 unkompliziert get config - - global müssen Sie nur 

00:10:29.030 --> 00:10:33.350
 Tun Sie dies einmal, machen Sie sich keine Sorgen, wenn Sie Probleme beim Eingeben haben 

00:10:33.350 --> 00:10:39.980
 Kopieren Sie es in Ordnung und dann in Anführungszeichen werde ich Robby in Kategorie 5 TV setzen und das ist 

00:10:39.980 --> 00:10:48.890
 Wenn ich nur meine E-Mail-Adresse sage, gehe ich zum Benutzer-Punktnamen, den ich nicht kenne 

00:10:48.890 --> 00:10:52.550
 Wenn Sie das hören können, aber es ist tatsächlich ein wirklich schlimmer Sturm außerhalb unseres Studios 

00:10:52.550 --> 00:10:56.720
 Heute flackern die Lichter ein paar Mal und ich denke, wir werden es bekommen 

00:10:56.720 --> 00:11:02.090
 durch es sowieso so gut, lösche das und ändere meinen Namen in Robby 

00:11:02.090 --> 00:11:06.710
 Ferguson geben ok fertig, also muss ich das nur einmal machen, also jetzt Szene 

00:11:06.710 --> 00:11:11.420
 Das nächste Mal, wenn ich dieses Git-Commit ausführe, füge ich es nur hinzu, okay 

00:11:11.420 --> 00:11:15.050
 Also habe ich es hinzugefügt und es sieht, dass sich eine Datei geändert hat, es gibt zwei 

00:11:15.050 --> 00:11:20.270
 Einfügungen und Test SH ist neu, also wird es das schaffen, also jetzt das Finale 

00:11:20.270 --> 00:11:26.450
 Der Befehl, den ich eingeben muss, lautet "Push-Ursprung" und ich werde den angeben 

00:11:26.450 --> 00:11:32.360
 Master, der der Zweig Master ist, also Origin Master und jetzt wird es 

00:11:32.360 --> 00:11:35.720
 Fragen Sie mich nach meinem Benutzernamen und Passwort, die ich bei der Erstellung meines eingegeben habe 

00:11:35.720 --> 00:11:44.360
 Konto also Cat5 TV ist mein Benutzername und mein Passwort Ich benutze LastPass und generiere neu 

00:11:44.360 --> 00:11:49.430
 Passwörter die ganze Zeit und sie sind massiv und verrückt, also habe ich ein Passwort kopiert 

00:11:49.430 --> 00:11:57.500
 und dann habe ich es eingefügt und da geht es los, es lädt diese Daten auf meine hoch 

00:11:57.500 --> 00:12:02.840
 Repository und es ist so f5 zu aktualisieren und Sie sollten den Test SH sehen 

00:12:02.840 --> 00:12:09.200
 ist jetzt Teil meines Github-Repositorys und da ist es und es zeigt, dass es ist 

00:12:09.200 --> 00:12:17.330
 Executive Hallo Welt, also jetzt zurück hier, also tun wir einfach so, als hätte ich Änderungen vorgenommen 

00:12:17.330 --> 00:12:20.750
 anderswo also auf einem anderen Computer und ich werde dies über den Browser tun 

00:12:20.750 --> 00:12:29.270
 Nur um es dir auf diesem System zu zeigen, werde ich wieder Hallo sagen, okay und dann 

00:12:29.270 --> 00:12:33.680
 Ich werde diese Änderungen speichern. Ich werde ihm keinen Namen oder ähnliches geben 

00:12:33.680 --> 00:12:37.340
 Diese Beschreibung werde ich nur bestätigen, damit das Skript jetzt so aussieht 

00:12:37.340 --> 00:12:41.600
 Wie ich das auch im Browser ändere, kannst du jetzt von überall aus tun, wenn 

00:12:41.600 --> 00:12:47.510
 Ich schaue mir meine Datei lokal auf meinem Computer im Repository an, dort gehen wir noch hin 

00:12:47.510 --> 00:12:53.630
 sagt nur hallo Welt okay, also werde ich wieder ziehen gehen Ich mache das alles 

00:12:53.630 --> 00:12:58.700
 In meinem Unterstrich-Testordner sucht Git Pull dann nach einem 

00:12:58.700 --> 00:13:02.510
 Änderungen, die an anderer Stelle vorgenommen wurden, und ziehen Sie sie so auf meinen Computer 

00:13:02.510 --> 00:13:07.460
 Es synchronisiert diese Änderungen immer, wenn ich Nano öffne und diese Datei öffne 

00:13:07.460 --> 00:13:14.000
 Sie können sehen, dass das neue Hallo jetzt wieder Teil davon ist, also werde ich Ihnen Echo zeigen 

00:13:14.000 --> 00:13:20.270
 Hallo mal drei und ich werde das speichern und jetzt werde ich genau das tun 

00:13:20.270 --> 00:13:22.400
 das Gleiche, aber zeig dir, wie es jetzt anders ist 

00:13:22.400 --> 00:13:28.490
 Ich habe bereits meinen Namen und meine E-Mail-Adresse eingegeben. 

00:13:28.490 --> 00:13:39.410
 Ich bin das letzte Update bekommen Push Origin Master Cap 5 TV ist mein Benutzername und mein Passwort 

00:13:39.410 --> 00:13:50.120
 ist eine Zeichenfolge mit ungefähr 64 zufällig ausgewählten Zeichen und ich werde sie einfügen 

00:13:50.120 --> 00:13:56.060
 Das in und da gehen wir, also ist das alles, was es gibt, um jetzt meine Änderungen voranzutreiben 

00:13:56.060 --> 00:14:00.680
 lokal auf den Github-Server, damit er wieder mit allen anderen geteilt wird oder 

00:14:00.680 --> 00:14:05.510
 mit meinen anderen Systemen, wenn ich einen Get Pull mache, damit ich auf diese Weise klappern kann 

00:14:05.510 --> 00:14:09.980
 verzeih mir git klon etwas und es muss nicht meins sein es kann sein 

00:14:09.980 --> 00:14:14.690
 das Github-Repository eines anderen, solange es öffentlich ist, aber dann kann ich es machen 

00:14:14.690 --> 00:14:19.070
 Änderungen daran auf meinem lokalen Computer und dann kann ich einen Push machen, jetzt müssen Sie besitzen 

00:14:19.070 --> 00:14:24.710
 das Repository, um einen Push durchzuführen, damit Änderungen an jemandem vorgenommen werden können 

00:14:24.710 --> 00:14:29.570
 Das Repository von else besteht darin, es zu teilen, wenn Sie zum Repository gehen, auf das Sie klicken 

00:14:29.570 --> 00:14:34.040
 Die Schaltfläche heißt Gabel und es wird im Grunde eine Kopie davon in Ihrem eigenen Konto erstellt 

00:14:34.040 --> 00:14:37.550
 dass Sie Änderungen vornehmen können und dann können Sie Pull-Anforderungen ausführen 

00:14:37.550 --> 00:14:41.000
 Aber das sind die Grundlagen für den Einstieg, die es Ihnen ermöglichen werden 

00:14:41.000 --> 00:14:45.680
 Erstellen Sie Repositorys. Laden Sie Ihre Dateien hoch. Laden Sie Ihren Code hoch 

00:14:45.680 --> 00:14:49.250
 Es kann von jedem System aus auf einem Raspberry Pi auf Ihrem Windows-Computer getestet werden 

00:14:49.250 --> 00:14:54.410
 auf Ihrem Linux-Desktop auf was auch immer und schieben Sie dann alle diese Änderungen auf die 

00:14:54.410 --> 00:14:59.030
 Server, damit sie heruntergeladen oder auf alle Ihre Systeme gezogen werden können 

00:14:59.030 --> 00:15:01.810
 alles was dazu gehört 

00:15:07.430 --> 00:15:10.480
 [Musik] 

