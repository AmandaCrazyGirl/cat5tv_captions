WEBVTT
Kind: captions
Language: ja

00:00:01.520 --> 00:00:07.200
カテゴリ5のコミュニティコーヒーブレークに参加したことがない場合は、 

00:00:07.200 --> 00:00:11.490
カテゴリー5ドットテレビで詳細をご覧ください。ホームページを下にスクロールしてください。 

00:00:11.490 --> 00:00:15.570
コミュニティのコーヒーブレイクとスケジュールが表示されます

00:00:15.570 --> 00:00:19.920
次のイベントは、ズームを行う毎週のイベントです」 

00:00:19.920 --> 00:00:23.430
私たちのコミュニティが集まり、さらには

00:00:23.430 --> 00:00:29.189
私たちは皆、今日私たちの世界で経験していることを経験していますが、 

00:00:29.189 --> 00:00:35.370
それらのことについて話すのではなく、 

00:00:35.370 --> 00:00:40.260
今私たちを倒しているそれを見てみましょう

00:00:40.260 --> 00:00:47.039
この状況で立ち往生している私は何をしているのですかそれは私を興奮させます

00:00:47.039 --> 00:00:52.010
技術的に実験していることは何ですか

00:00:52.010 --> 00:00:56.489
私にとって興味深く、私が家にいるのかどうかにかかわらず、時間を費やすのを助けてくれます

00:00:56.489 --> 00:01:03.989
現在またはどんなケースであろうとgithubについてのトピックが浮上しました

00:01:03.989 --> 00:01:10.380
私たちはプログラミングについて話している、そしてピーターはほとんど毎回そこにいます

00:01:10.380 --> 00:01:14.580
コミュニティのコーヒーブレイクとピーターはよくgithubをうまく使う方法を尋ねていました

00:01:14.580 --> 00:01:18.750
実際には、私たちがあなたに見せたり話したりすることができるものではありません

00:01:18.750 --> 00:01:22.799
コーヒーブレイクを終えましたが、それは本当に

00:01:22.799 --> 00:01:27.330
カテゴリー5のテクノロジーTVとその理由について話し合うのに適したトピック

00:01:27.330 --> 00:01:34.350
最初に登場したのは、Microsoftがgithubを購入したときに、それを維持したからです。 

00:01:34.350 --> 00:01:39.570
現状のままで、特定の機能に料金を支払わなければなりませんでしたが、 

00:01:39.570 --> 00:01:48.240
その後、突然非常に最近マイクロソフトが言ったとすべてのそれらの機能のために支払った

00:01:48.240 --> 00:01:51.899
それらのすべてを除いて、あなたが以前に支払わなければならなかった機能に支払われたそれらの多く

00:01:51.899 --> 00:01:55.500
今は無料ですので、彼らはサービスを受けており、基本的に

00:01:55.500 --> 00:02:00.659
プレミアムサービスをgithub comで完全無料で提供しています。 

00:02:00.659 --> 00:02:06.600
 githubもgithubはクラウドサービスプロバイダーのようなものですが、 

00:02:06.600 --> 00:02:10.800
あなたが行くことができるように私たちが私たちのプロジェクトを管理できるようにするのに役立ちます

00:02:10.800 --> 00:02:15.050
基本的にコードで時間を遡ります。 

00:02:15.050 --> 00:02:20.540
これらのコミットを確認し、変更がプロジェクトにどのように影響したかを確認してください。 

00:02:20.540 --> 00:02:26.330
コードを共有できるため、コードの優れたストレージメカニズム

00:02:26.330 --> 00:02:30.350
もちろん、あなたが今欲しいなら他の人はもちろんそれを無料にします

00:02:30.350 --> 00:02:37.640
これで、無料のプライベートリポジトリも使用できるようになり、セットアップできます。 

00:02:37.640 --> 00:02:41.300
他のプログラマーとコラボレーションしたい場合は、必要な数のチームが

00:02:41.300 --> 00:02:45.920
基本的にそれが私のために何をしているのですか？ 

00:02:45.920 --> 00:02:49.459
他の人々がそれをオープンソースで使用できるように、彼らはそれをコンパイルしたり使用したりできます

00:02:49.459 --> 00:02:55.459
それを自分のコンピュータで実行するか、彼らがまあまあ決断した場合、私はむしろ

00:02:55.459 --> 00:02:59.510
このように機能するか、おそらくここにバグがあり、彼らができることを修正できます

00:02:59.510 --> 00:03:05.390
プルリクエストと呼ばれるので、基本的に彼らは私のgithubリポジトリを私のソフトウェアのクローンにします

00:03:05.390 --> 00:03:10.730
彼らは自分のコンピューターでそれを修正し、その後プッシュするプルリクエストを実行するコード

00:03:10.730 --> 00:03:16.100
彼らがフォークに押し戻している間にそれを戻し、それからプルリクエストを作成します

00:03:16.100 --> 00:03:21.709
私にとっては、ジョーが彼らの修正を吹き飛ばしてくれることを確認するために、このバグを私の

00:03:21.709 --> 00:03:26.720
ソフトウェアをクリックすると、その修正がソフトウェアにインポートされます。 

00:03:26.720 --> 00:03:33.890
それにはたくさんのことがあり、それは本当にそれは非常に強力であることができます

00:03:33.890 --> 00:03:37.519
特に、それらを押しつぶしてマージするときに混乱します

00:03:37.519 --> 00:03:41.390
今日は取り上げないけど、やりたいこと

00:03:41.390 --> 00:03:47.150
それがどのように機能するかについての最も基本的な知識が

00:03:47.150 --> 00:03:53.720
効果的な方法でgithubを使用できるようにします。 

00:03:53.720 --> 00:03:58.519
あなたのコードをオープンソースソフトウェアとして公開している必要はありません

00:03:58.519 --> 00:04:03.470
あなたが望むならそれをプライベートにすることができますが、私の場合はそれが私がやっていることです

00:04:03.470 --> 00:04:07.130
時々私と協力する人々が問題を投稿するかもしれません

00:04:07.130 --> 00:04:10.430
彼らがバグを見つけた場合、私はまだそれを修正しなければならない人ですが、 

00:04:10.430 --> 00:04:15.590
少なくとも私のコミュニティは私のソフトウェアリポジトリに入っており、これは

00:04:15.590 --> 00:04:21.769
問題とあなたはそれをすべて修正する必要がありますので、github穏やかなあなたが行くところはサインです

00:04:21.769 --> 00:04:26.360
無料アカウントの準備は、リンクをクリックしてクリックするだけです

00:04:26.360 --> 00:04:30.080
今すぐサインアップするすでにアカウントを持っているので、自分でログインします

00:04:30.080 --> 00:04:37.789
サインインすると、リポジトリに行ってジャンプしたときに、 

00:04:37.789 --> 00:04:47.569
ここに帰って、ここにロードさせてください。 

00:04:47.569 --> 00:04:56.000
まっすぐに猫5テレビは私のすべてのソフトウェアをホストしているので、あなたはそこに行きます

00:04:56.000 --> 00:04:58.909
 github.comが猫5のテレビをスラッシュすると、これがどのように機能するかがわかります

00:04:58.909 --> 00:05:02.779
だから、私はソフトウェアリポジトリをたくさん持っていることがわかります。 

00:05:02.779 --> 00:05:07.099
私が行った、または継続しているすべての異なるプロジェクト

00:05:07.099 --> 00:05:12.889
やるとページとページとそのページがあるので、githubを入手したら

00:05:12.889 --> 00:05:19.340
ここに表示されるものにログインできますが、これは私のリポジトリリストですが

00:05:19.340 --> 00:05:23.090
あなたが最初にサインアップするとき、あなたはあなたが作成する必要があるこれらのすべてを持っていないでしょう

00:05:23.090 --> 00:05:26.750
あなたの最初のリポジトリなので、私がそれを行う方法は今理解しています

00:05:26.750 --> 00:05:33.289
 githubは不要です。okを忘れてください。gitはgithubと同じではありません。githubは

00:05:33.289 --> 00:05:39.919
オンラインサービスとそれをクラウドストレージとして考えるそれは同じではない忘れてください

00:05:39.919 --> 00:05:46.400
オープンソースのパッケージ管理ツールや

00:05:46.400 --> 00:05:50.960
プロジェクト管理ツールなので、ここgithubで本当に作りました

00:05:50.960 --> 00:05:55.400
新しいリポジトリと簡単に言うので、自分のリポジトリに行って、 

00:05:55.400 --> 00:05:59.360
 [新規]をクリックしてから、これに名前を付けます。 

00:05:59.360 --> 00:06:07.419
 1つの私のアンダースコアテストとオプションの説明これはショーのテストです

00:06:07.419 --> 00:06:12.800
パブリックにするかプライベートにするかを指定してから、 

00:06:12.800 --> 00:06:17.029
 readme人々がそれにアクセスできるようにすることは、それを作ることであることが常に最善です

00:06:17.029 --> 00:06:20.839
ライセンスを追加したい自分を含めてすぐに追加したい

00:06:20.839 --> 00:06:24.740
 git ignore私はそれらの両方を空のままにするつもりですあなたはそれが何を意味するかを発見します

00:06:24.740 --> 00:06:30.680
将来、あなたのリポジトリを作成するので、今私は私のアンダースコアテストと呼ばれるものを持っています

00:06:30.680 --> 00:06:34.459
しかし、そこには何もありません。ブラウザはこれで完了です。 

00:06:34.459 --> 00:06:39.830
行うには、私の端末を起動し、私の端末で私はするつもりです

00:06:39.830 --> 00:06:43.320
 get OKと入力して、私が確認したことを確認します

00:06:43.320 --> 00:06:48.330
あなたがインストールしていないのですでにインストールされているので、私はLinuxを使っています

00:06:48.330 --> 00:06:53.460
ここにDebian Linuxと入力すると、apt install gitと入力できます。 

00:06:53.460 --> 00:07:05.640
タイプ私は失礼ではありませんsudo suログインはロックok apt installですが、 

00:07:05.640 --> 00:07:09.660
私はすでに電流を持っていることを知っています

00:07:09.660 --> 00:07:13.500
私のための他の更新がありますが、getはすでに最新バージョンなので、 

00:07:13.500 --> 00:07:17.430
 RPMベースでない場合は、インストールする必要があります。 

00:07:17.430 --> 00:07:22.980
システムはyum install gitで、GUIでも見つけることができます

00:07:22.980 --> 00:07:28.740
リポジトリマネージャー、パッケージマネージャー、またはいくつかのシナプスのように使用するもの

00:07:28.740 --> 00:07:33.750
たとえば、パッケージマネージャーをインストールしたら、フォルダーを作成します。 

00:07:33.750 --> 00:07:41.100
おそらくあなたのホームフォルダにあり、私がこのリポジトリを呼び出すために私は

00:07:41.100 --> 00:07:46.290
私のコードが正しいことを常に知っている場所があるので、これは

00:07:46.290 --> 00:07:52.650
 gitリポジトリのローカルコピーなので、「git clone」と入力して、 

00:07:52.650 --> 00:08:00.210
このURLをコピーしますgithub.com slash cat 5 TVスラッシュでアンダースコアテスト

00:08:00.210 --> 00:08:08.010
それをctrl Cだけでコピーすると、それを入力するだけで慣れます

00:08:08.010 --> 00:08:13.560
ユーザー名でリポジトリにスラッシュを付けて、ファイルシステムを確認すると、 

00:08:13.560 --> 00:08:20.760
 cloned get cloneの名前またはリポジトリのURLなので、ここで

00:08:20.760 --> 00:08:25.920
ホームフォルダーに移動してリポジトリに移動すると、ルートが所有していることがわかります

00:08:25.920 --> 00:08:31.740
スーパーユーザーが訴訟を起こすのを見たので、今度は私のテストと呼ばれるフォルダーがあり、 

00:08:31.740 --> 00:08:38.250
テスト内にはreadme MDというファイルがあり、このフォルダー内にあるので

00:08:38.250 --> 00:08:43.250
私のテストに入り、これを呼び出す新しいファイルを作成したいと思います

00:08:43.250 --> 00:08:50.970
 nano test dot SHとbashスクリプトを実行するためのクイックSHファイルを作成し、 

00:08:50.970 --> 00:08:55.640
ここにエコーこんにちはと入力します

00:08:55.640 --> 00:09:00.970
通常のHello Worldに固執する

00:09:00.970 --> 00:09:05.690
それを書いて閉じたので、ファイルが

00:09:05.690 --> 00:09:13.910
 githubまでファイルを転送するときに、ドットs Hをテストすると、アクセス許可は

00:09:13.910 --> 00:09:18.500
そのプッシュに含まれるので、もし私がドットスラッシュテストドットs Hを行うなら

00:09:18.500 --> 00:09:23.360
許可が拒否されたと書いてありますので、エグゼクティブエグゼクティブ全員をchmodにする必要があります。 

00:09:23.360 --> 00:09:30.680
プラスxテストドットs Hなので、テストドットs HS s hello worldと入力すると、 

00:09:30.680 --> 00:09:35.510
最初のスクリプトをgithubに移動する準備ができています。これは私の一部です

00:09:35.510 --> 00:09:41.870
私のローカルコンピューター上のリポジトリですが、githubにはまだありません。 

00:09:41.870 --> 00:09:45.500
 github更新して、ファイルリストがここに表示されていることを証明します。 

00:09:45.500 --> 00:09:50.390
まだreadmeだけでいいので、ターミナルウィンドウに戻ります。 

00:09:50.390 --> 00:09:56.330
もう一度そのgitコマンドを使用して、リポジトリ内にスターを追加します

00:09:56.330 --> 00:10:01.270
変更のあるファイルを見つけて追加し、ok getと言っているフォルダ

00:10:01.270 --> 00:10:09.680
コミット-引用符であなたのコミットに名前を付けるので、私は言うつもりです

00:10:09.680 --> 00:10:14.480
私の最初のスクリプトとこれらは短い短い説明であり、Enterキーを押して

00:10:14.480 --> 00:10:19.220
今それはあなたが私たちに誰であるかを言う必要があると言っています

00:10:19.220 --> 00:10:24.380
このコンピューターでgitを実行する前に、これらの2つのコマンドを実行する必要があります。 

00:10:24.380 --> 00:10:29.030
簡単なget config--必要なのはグローバルのみ

00:10:29.030 --> 00:10:33.350
一度これを行うと、ユーザーのドットメールを心配する必要はありません。 

00:10:33.350 --> 00:10:39.980
コピーして大丈夫です。引用符で、ロビーをカテゴリ5のテレビに配置します。 

00:10:39.980 --> 00:10:48.890
自分のメールアドレスを伝えるだけで、ユーザードット名がわかりません。 

00:10:48.890 --> 00:10:52.550
あなたはそれを聞くことができますが、それは実際には私たちのスタジオの外で本当にひどい嵐です

00:10:52.550 --> 00:10:56.720
今日はライトが数回ちらつきますが、私たちは得るつもりだと思います

00:10:56.720 --> 00:11:02.090
とにかくそれを通してそれを削除して、私の名前をRobbyに変更します

00:11:02.090 --> 00:11:06.710
ファーガソンは大丈夫です、それで私は一度だけそれをしなければならないので、今のシーン

00:11:06.710 --> 00:11:11.420
次回git commitを実行したとき-それは単にそれを追加しているだけですか？ 

00:11:11.420 --> 00:11:15.050
それを追加したところ、1つのファイルが変更されたことがわかります。 

00:11:15.050 --> 00:11:20.270
挿入とSHのテストは新しいので作成しますので、最終的に

00:11:20.270 --> 00:11:26.450
入力する必要があるコマンドはget originで、次のように指定します。 

00:11:26.450 --> 00:11:32.360
マスターはブランチマスターなので、オリジンマスターであり、 

00:11:32.360 --> 00:11:35.720
作成時に入力したユーザー名とパスワードを尋ねます

00:11:35.720 --> 00:11:44.360
アカウントなので、cat5 TVは私のユーザー名とパスワードで、LastPassを使用して新しい

00:11:44.360 --> 00:11:49.430
パスワードは常にあり、それらは巨大でクレイジーなので、パスワードをコピーしました

00:11:49.430 --> 00:11:57.500
そして、それを貼り付け、そこにデータをアップロードします

00:11:57.500 --> 00:12:02.840
リポジトリとf5で更新され、テストSHが表示されます。 

00:12:02.840 --> 00:12:09.200
今私のgithubリポジトリの一部であり、そこにあり、それはそれがであることを示しています

00:12:09.200 --> 00:12:17.330
エグゼクティブこんにちは世界だから、ここに戻って、私が変更を加えたふりをしましょう

00:12:17.330 --> 00:12:20.750
他の場所では別のコンピューターで、ブラウザーでこれを実行します

00:12:20.750 --> 00:12:29.270
ただ見せるために、このシステムでもう一度こんにちはこんにちはこんにちはエコーしに行きます

00:12:29.270 --> 00:12:33.680
それらの変更を保存します名前などは付けません

00:12:33.680 --> 00:12:37.340
この説明は確認するだけなので、スクリプトは次のようになります。 

00:12:37.340 --> 00:12:41.600
私がブラウザでそれを変更する方法もあなたがどこからでもこれを行うことができるので、今なら

00:12:41.600 --> 00:12:47.510
私は自分のコンピューターのリポジトリでファイルをローカルで確認します。 

00:12:47.510 --> 00:12:53.630
こんにちは世界大丈夫だと言うので、私はもう一度引っ張りに行くつもりです私はこれをすべてやっています

00:12:53.630 --> 00:12:58.700
私のアンダースコアテストフォルダ内にあるので、git pullはその後すべてを探します

00:12:58.700 --> 00:13:02.510
他の場所で行われた変更と私のコンピューターにそれらをプルダウン

00:13:02.510 --> 00:13:07.460
常にそれらの変更を同期しているので、Nanoを開いてそのファイルを開くと、 

00:13:07.460 --> 00:13:14.000
新しいこんにちはこんにちは今その一部であることを見ることができるので、私はあなたにエコーを示すつもりです

00:13:14.000 --> 00:13:20.270
こんにちは3回目です。これを保存します。今から正確に

00:13:20.270 --> 00:13:22.400
同じことですが、それが今どのように違うかを示します

00:13:22.400 --> 00:13:28.490
私はすでに名前とメールアドレスを入力しました。AdStar get commit- 

00:13:28.490 --> 00:13:39.410
最終更新はプッシュオリジンマスターキャップを取得します5 TVは私のユーザー名とパスワードです

00:13:39.410 --> 00:13:50.120
ランダムに選択された約64文字の文字列で、貼り付けます

00:13:50.120 --> 00:13:56.060
それはあちこちにあるので、変更をプッシュするために必要なことはこれだけです。 

00:13:56.060 --> 00:14:00.680
 githubサーバーのローカルにあるため、他の全員と再び共有するか、 

00:14:00.680 --> 00:14:05.510
私が他のシステムでget pullを行うと、それにより、clompを取得できます

00:14:05.510 --> 00:14:09.980
 git cloneしてください。私のものである必要はありません。 

00:14:09.980 --> 00:14:14.690
公開されている限り、他の誰かのgithubリポジトリを作成できます。 

00:14:14.690 --> 00:14:19.070
私のローカルマシンでそれを変更してから、私はプッシュを行うことができます

00:14:19.070 --> 00:14:24.710
プッシュを実行するためのリポジトリなので、誰かに変更を加える方法

00:14:24.710 --> 00:14:29.570
他のリポジトリはフォークすることですので、リポジトリに行くときにクリックします

00:14:29.570 --> 00:14:34.040
 forkというボタンを押すと、基本的に自分のアカウントにコピーが作成されます

00:14:34.040 --> 00:14:37.550
変更を加えることができ、それからプルリクエストを行うことができます

00:14:37.550 --> 00:14:41.000
しかし、これらはあなたが始めるための基本であり、 

00:14:41.000 --> 00:14:45.680
リポジトリを作成するファイルをアップロードするコードをアップロードする操作できる

00:14:45.680 --> 00:14:49.250
 WindowsマシンのRaspberry Piでテストできるように、どのシステムからでもテストできます

00:14:49.250 --> 00:14:54.410
 Linuxデスクトップ上で何でもし、それらすべての変更を

00:14:54.410 --> 00:14:59.030
サーバーにダウンロードしたり、すべてのシステムにプルしたりできるように

00:14:59.030 --> 00:15:01.810
それにすべてがあります

00:15:07.430 --> 00:15:10.480
 [音楽] 

