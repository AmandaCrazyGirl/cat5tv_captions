WEBVTT
Kind: captions
Language: ko

00:00:01.520 --> 00:00:07.200
 카테고리 5 커뮤니티 커피 브레이크에 참여한 적이 없다면 

00:00:07.200 --> 00:00:11.490
 카테고리 5 도트 TV에서 자세한 내용을 확인하십시오. 홈페이지에서 아래로 스크롤하십시오. 

00:00:11.490 --> 00:00:15.570
 그리고 당신은 우리의 일정과 함께 커뮤니티 커피 브레이크를 볼 수 있습니다 

00:00:15.570 --> 00:00:19.920
 우리는 다음 일을 할 것입니다. 우리가 주최하는 주간 행사입니다. ' 

00:00:19.920 --> 00:00:23.430
 우리 공동체가 함께 모여서 

00:00:23.430 --> 00:00:29.189
 우리 모두가 오늘날 세상에서 겪고있는 것을 경험하고 있지만 

00:00:29.189 --> 00:00:35.370
 그런 것들에 대해 말하는 것이 아니라 말하기 위해 접근했습니다 

00:00:35.370 --> 00:00:40.260
 우리를 지금 당장 끌어 당기고 있습니다 

00:00:40.260 --> 00:00:47.039
 이 상황에 갇혀서 내가하고있는 일은 무엇입니까? 

00:00:47.039 --> 00:00:52.010
 제가 기술적으로 실험하고있는 것은 무엇입니까? 

00:00:52.010 --> 00:00:56.489
 나에게 흥미 있고 집에 갇혀 있는지 시간을 잡도록 도와주었습니다. 

00:00:56.489 --> 00:01:03.989
 지금 또는 어떤 경우이든 관계없이 github에 관한 주제가 나타났습니다. 

00:01:03.989 --> 00:01:10.380
 우리는 프로그래밍에 대해 이야기하고 있으며 Peter는 거의 항상 

00:01:10.380 --> 00:01:14.580
 커뮤니티 커피 브레이크와 피터 잘 github을 어떻게 사용합니까 

00:01:14.580 --> 00:01:18.750
 우리가 보여 주거나 이야기 할 수있는 것이 아니라 

00:01:18.750 --> 00:01:22.799
 커피 브레이크를 통해하지만 정말 잘 될 것입니다 

00:01:22.799 --> 00:01:27.330
 카테고리 5 기술 TV와 그 이유에 대해 토론하기에 좋은 주제 

00:01:27.330 --> 00:01:34.350
 처음에는 마이크로 소프트가 github를 구매했을 때 

00:01:34.350 --> 00:01:39.570
 상태 그대로 유지되고 특정 기능에 대한 비용을 지불해야하지만 

00:01:39.570 --> 00:01:48.240
 그런 다음 갑자기 매우 최근에 Microsoft가 말했지만 모든 기능에 대한 비용을 지불하지 않은 사람들 

00:01:48.240 --> 00:01:51.899
 당신이 지불해야했던 기능에 대해 많은 돈을 지불했지만 

00:01:51.899 --> 00:01:55.500
 지금은 무료이므로 서비스를 받고 있으며 기본적으로 

00:01:55.500 --> 00:02:00.659
 github com에서 프리미엄 서비스를 무료로 제공합니다. 

00:02:00.659 --> 00:02:06.600
 github well github는 클라우드 서비스 제공 업체와 비슷합니다. 

00:02:06.600 --> 00:02:10.800
 개발자가 프로젝트를 관리 할 수 ​​있도록 도와줍니다. 

00:02:10.800 --> 00:02:15.050
 기본적으로 코드로 돌아가서 실제로 할 수있는 것이 도움이됩니다. 

00:02:15.050 --> 00:02:20.540
 커밋과 변경 사항이 프로젝트에 어떤 영향을 미쳤는지 확인하십시오. 

00:02:20.540 --> 00:02:26.330
 코드를 공유 할 수 있기 때문에 코드를위한 훌륭한 저장 메커니즘 

00:02:26.330 --> 00:02:30.350
 물론 다른 사람들도 원한다면 Microsoft를 무료로 만드십시오. 

00:02:30.350 --> 00:02:37.640
 이제 무료 개인 저장소도 가질 수 있으며 설정할 수 있습니다 

00:02:37.640 --> 00:02:41.300
 다른 프로그래머와 협력하고 싶을 때 원하는만큼의 팀 

00:02:41.300 --> 00:02:45.920
 본질적으로 그것이 나를 위해하는 일은 내 코드를 온라인에서 공유 할 수 있다는 것입니다. 

00:02:45.920 --> 00:02:49.459
 다른 사람들이 그것을 오픈 소스로 사용할 수있는 방식으로 컴파일하거나 사용할 수 있습니다 

00:02:49.459 --> 00:02:55.459
 그것을 자신의 컴퓨터에서 실행하고 그들이 오 잘 결정하면 오히려 오히려 

00:02:55.459 --> 00:02:59.510
 이 방법으로 작동하거나 여기에 버그가 있으며 그들이 할 수있는 것을 고칠 수 있습니다. 

00:02:59.510 --> 00:03:05.390
 풀 요청을 호출하여 기본적으로 내 github 저장소를 소프트웨어로 복제합니다. 

00:03:05.390 --> 00:03:10.730
 코드를 컴퓨터에 고정시킨 다음 풀 요청을 수행하여 푸시합니다. 

00:03:10.730 --> 00:03:16.100
 포크로 다시 밀면 풀 요청이 생깁니다. 

00:03:16.100 --> 00:03:21.709
 저를 위해 Joe가이 버그를 수정하여 

00:03:21.709 --> 00:03:26.720
 소프트웨어 버튼을 클릭하면 해당 수정 사항을 소프트웨어로 가져옵니다. 

00:03:26.720 --> 00:03:33.890
 거기에는 많은 것들이 있으며 그것은 정말 강력 할 수 있습니다. 

00:03:33.890 --> 00:03:37.519
 특히 스쿼시 및 병합 할 때 혼동 

00:03:37.519 --> 00:03:41.390
 우리가 오늘 들어 가지 않을 것들이지만 내가하고 싶은 것 

00:03:41.390 --> 00:03:47.150
 작동 방식에 대한 가장 기본적인 지식이 

00:03:47.150 --> 00:03:53.720
 효과적인 방법으로 github을 사용할 수 있도록하십시오. 

00:03:53.720 --> 00:03:58.519
 코드를 오픈 소스 소프트웨어로 사용하기 때문에 

00:03:58.519 --> 00:04:03.470
 원하는 경우 비공개로 할 수 있지만 제 경우에는 내가하고있는 일입니다. 

00:04:03.470 --> 00:04:07.130
 사람들이 나와 공동 작업을해서 간혹 문제를 게시 할 수도 있습니다 

00:04:07.130 --> 00:04:10.430
 그들이 버그를 찾은 후에도 여전히 문제를 해결해야하지만 

00:04:10.430 --> 00:04:15.590
 최소한 내 커뮤니티가 소프트웨어 저장소에 들어 와서 이것이 

00:04:15.590 --> 00:04:21.769
 문제가 발생하면 github calm이 어디로 가야합니까? 

00:04:21.769 --> 00:04:26.360
 무료 계정을 만들려면 링크를 클릭하고 

00:04:26.360 --> 00:04:30.080
 지금 가입하십시오 이미 계정이 있으므로 본인으로 로그인하겠습니다 

00:04:30.080 --> 00:04:37.789
 로그인하면 저장소에 가서 점프하면 

00:04:37.789 --> 00:04:47.569
 집에 가서 여기로갑니다 

00:04:47.569 --> 00:04:56.000
 cat 5 TV로 바로 이동하면 소프트웨어를 모두 호스팅 할 수 있으므로 

00:04:56.000 --> 00:04:58.909
 github.com은 고양이 5 TV를 슬래시하고 어떻게 작동하는지 볼 수 있습니다 

00:04:58.909 --> 00:05:02.779
 그래서 당신은 내가 수많은 소프트웨어 저장소를 가지고 있고 그것들이 모두임을 알 수 있습니다 

00:05:02.779 --> 00:05:07.099
 내가 한 일이나 계속하고있는 다른 일들 

00:05:07.099 --> 00:05:12.889
 당신이 github를 가지고 있다면 그렇게 할 페이지와 페이지와 페이지가 있습니다. 

00:05:12.889 --> 00:05:19.340
 계정 내 저장소 목록 인 여기에 표시되는 내용에 로그인 할 수 있지만 

00:05:19.340 --> 00:05:23.090
 처음 가입 할 때 만들 필요가있는 것은 아닙니다. 

00:05:23.090 --> 00:05:26.750
 첫 번째 리포지토리를 사용하여 이제 수행 할 방식을 이해합니다. 

00:05:26.750 --> 00:05:33.289
 github은 필요하지 않습니다. ok를 잊어 버리십시오 .git은 github와 동일하지 않습니다. 

00:05:33.289 --> 00:05:39.919
 온라인 서비스와 클라우드 스토리지로 생각하십시오. 

00:05:39.919 --> 00:05:46.400
 해당 오픈 소스 패키지 관리 도구의 온라인 스토리지이거나 

00:05:46.400 --> 00:05:50.960
 프로젝트 관리 도구를 여기 github에서 실제로 만들었습니다. 

00:05:50.960 --> 00:05:55.400
 간단하게 새로운 리포지토리를 말하면 리포지토리로 갔고 

00:05:55.400 --> 00:05:59.360
 새로운 것을 클릭 한 다음 나는 이것을 전화 할 이름을 줄 것입니다. 

00:05:59.360 --> 00:06:07.419
 하나는 내 밑줄 테스트와 선택적인 설명입니다. 이것은 쇼를위한 테스트입니다. 

00:06:07.419 --> 00:06:12.800
 공개 또는 비공개 중 하나를 원하는지 여부 

00:06:12.800 --> 00:06:17.029
 읽어보기 항상 사람들이 액세스 할 수 있도록하는 것이 가장 좋습니다 

00:06:17.029 --> 00:06:20.839
 라이센스를 추가하려는 자신을 포함하여 즉시 

00:06:20.839 --> 00:06:24.740
 git ignore 나는 둘 다 비워 두겠다는 것을 의미합니다. 

00:06:24.740 --> 00:06:30.680
 미래와 저장소를 만들었으므로 이제 밑줄 테스트라고합니다. 

00:06:30.680 --> 00:06:34.459
 하지만 거기에는 아무것도 없으며 브라우저로 끝났으므로 이제는 

00:06:34.459 --> 00:06:39.830
 해야 할 일은 내 터미널을 불러오고 터미널에서 

00:06:39.830 --> 00:06:43.320
 내가 괜찮다는 것을 알 수 있도록 입력하십시오. 

00:06:43.320 --> 00:06:48.330
 설치하지 않은 경우 이미 설치 했으므로 Linux에 있습니다. 

00:06:48.330 --> 00:06:53.460
 데비안 리눅스 여기에 apt install git를 입력하십시오. 

00:06:53.460 --> 00:07:05.640
 내가 무례하지 않은 유형 sudo su에 로그인했다 rock ok apt install yet. 

00:07:05.640 --> 00:07:09.660
 나는 이미 전류를 가지고 오 아니 아니에요 나는 이미 그것을 가지고 

00:07:09.660 --> 00:07:13.500
 그래도 다른 업데이트가 있지만 get은 이미 최신 버전이므로 

00:07:13.500 --> 00:07:17.430
 RPM 기반이 아닌 경우 설치해야합니다. 

00:07:17.430 --> 00:07:22.980
 시스템 그것은 yum install git이며 GUI에서 찾을 수 있습니다. 

00:07:22.980 --> 00:07:28.740
 저장소 관리자 패키지 관리자 또는 시냅틱처럼 사용하는 모든 것 

00:07:28.740 --> 00:07:33.750
 예를 들어 패키지 관리자가 설치되면 폴더를 만듭니다. 

00:07:33.750 --> 00:07:41.100
 아마도 당신의 홈 폴더에 있고 우리는이 저장소를 전화 할 것입니다. 

00:07:41.100 --> 00:07:46.290
 내 코드가 옳다는 것을 항상 알고있는 장소가 있으므로 이것이 

00:07:46.290 --> 00:07:52.650
 내 자식 저장소의 로컬 사본이므로 이제 git clone을 입력하고 우리는 

00:07:52.650 --> 00:08:00.210
 이 URL을 복사 github.com 슬래시 고양이 5 TV 내 밑줄 테스트를 슬래시 할 수 있도록 

00:08:00.210 --> 00:08:08.010
 ctrl C를 사용하면 그것을 입력하는 데 익숙해 질 것입니다. 

00:08:08.010 --> 00:08:13.560
 사용자 이름은 저장소를 슬래시하고 이제 파일 시스템을 보면 

00:08:13.560 --> 00:08:20.760
 cloned get clone을 누른 다음 저장소의 이름 또는 URL을 입력하십시오. 

00:08:20.760 --> 00:08:25.920
 내 홈 폴더로 이동 한 다음 저장소로 이동하면 루트가 소유하고 있음을 알 수 있습니다. 

00:08:25.920 --> 00:08:31.740
 수퍼 유저 친구가 고소하는 것을 보았으므로 이제 테스트라는 폴더가 있습니다. 

00:08:31.740 --> 00:08:38.250
 내 테스트에는 readme MD라는 파일이 있으므로이 폴더 내에 있습니다. 

00:08:38.250 --> 00:08:43.250
 테스트에 들어가서 새 파일을 만들고 싶습니다. 

00:08:43.250 --> 00:08:50.970
 나노 테스트 도트 SH와 우리는 bash 스크립트를 실행하는 빠른 SH 파일을 만들고 

00:08:50.970 --> 00:08:55.640
 에코를 입력하겠습니다 안녕하세요 어떻게해야합니까 

00:08:55.640 --> 00:09:00.970
 표준 hello world에 충실하세요 

00:09:00.970 --> 00:09:05.690
 그래서 나는 그것을 작성했고 그것을 닫았으므로 이제 파일이라는 것이 있습니다. 

00:09:05.690 --> 00:09:13.910
 github로 파일을 전송할 때 권한 s 

00:09:13.910 --> 00:09:18.500
 내가 점 슬래시 테스트를 할 경우 그 푸시에 포함 될거야 

00:09:18.500 --> 00:09:23.360
 허가가 거부되었다는 것을 알았습니다. 

00:09:23.360 --> 00:09:30.680
 더하기 x 테스트 도트 s H 그래서 이제 테스트 도트 s HS s hello world를 입력하면 

00:09:30.680 --> 00:09:35.510
 github에 올라갈 수있는 첫 번째 스크립트를 준비하십시오. 

00:09:35.510 --> 00:09:41.870
 내 로컬 컴퓨터에 저장소가 있지만 아직 github에 있지 않으므로 

00:09:41.870 --> 00:09:45.500
 github 파일 목록이 여기에 있음을 증명하기 위해 새로 고칠 것입니다. 

00:09:45.500 --> 00:09:50.390
 여전히 readme 만 있어도 이제 터미널 창으로 돌아가서 

00:09:50.390 --> 00:09:56.330
 다시 git 명령을 사용하여 저장소에 별표를 추가합니다. 

00:09:56.330 --> 00:10:01.270
 말하는 폴더는 변경 사항이있는 파일을 찾아서 추가하십시오. 

00:10:01.270 --> 00:10:09.680
 커밋-오전에 인용 부호로 커밋 이름을 지정하여 말할 것입니다. 

00:10:09.680 --> 00:10:14.480
 내 첫 스크립트와 이것들은 짧은 작은 설명이며 Enter 키와 

00:10:14.480 --> 00:10:19.220
 지금은 당신이 결코 당신이 누구인지 당신에게 우리에게 말할 필요가 말해 

00:10:19.220 --> 00:10:24.380
 이 컴퓨터에서 git을 실행하기 전에이 두 명령을 꽤 실행해야합니다. 

00:10:24.380 --> 00:10:29.030
 간단한 get config--전역 만하면됩니다. 

00:10:29.030 --> 00:10:33.350
 이 작업을 한 번 수행하면 사용자 도트 이메일이 걱정되지 않으며 입력에 문제가있는 경우 

00:10:33.350 --> 00:10:39.980
 그것을 복사 한 다음 따옴표로 묶어 카테고리 5 TV에 로비를 넣을 것입니다. 

00:10:39.980 --> 00:10:48.890
 그냥 내 이메일 주소를 알려 주면 알 수없는 사용자 이름으로 이동합니다. 

00:10:48.890 --> 00:10:52.550
 당신이 그것을들을 수 있지만 실제로 우리 스튜디오 밖에서 정말 나쁜 폭풍입니다 

00:10:52.550 --> 00:10:56.720
 오늘 조명이 몇 번 깜박이고 있지만 

00:10:56.720 --> 00:11:02.090
 어쨌든 그것을 통해 모든 권리를 삭제하고 내 이름을 Robby로 변경하십시오. 

00:11:02.090 --> 00:11:06.710
 퍼거슨은 괜찮아 들어가서 이제는 한 번만 그렇게하면됩니다 장면 

00:11:06.710 --> 00:11:11.420
 다음에 git commit을 실행하면 괜찮습니다. 

00:11:11.420 --> 00:11:15.050
 그래서 나는 그것을 추가했고 하나의 파일이 두 가지로 바뀌는 것을 보았습니다. 

00:11:15.050 --> 00:11:20.270
 삽입 및 테스트 SH는 새로운 것이기 때문에 이제 최종 결승을 만들 것입니다. 

00:11:20.270 --> 00:11:26.450
 입력 해야하는 명령은 푸시 원점을 얻는 것입니다. 

00:11:26.450 --> 00:11:32.360
 브랜치 마스터 인 master이므로 오리진 마스터입니다. 

00:11:32.360 --> 00:11:35.720
 내가 만들 때 입력 한 사용자 이름과 비밀번호를 묻습니다. 

00:11:35.720 --> 00:11:44.360
 계정이므로 cat5 TV는 내 사용자 이름과 비밀번호이며 LastPass를 사용하여 새 비밀번호를 생성합니다 

00:11:44.360 --> 00:11:49.430
 암호는 항상 크고 거 대해서 암호를 복사했습니다. 

00:11:49.430 --> 00:11:57.500
 그런 다음 붙여 넣은 다음 해당 데이터를 내 데이터에 업로드합니다. 

00:11:57.500 --> 00:12:02.840
 리포지토리와 f5를 새로 고치면 테스트 SH가 표시됩니다. 

00:12:02.840 --> 00:12:09.200
 이제 내 github 저장소의 일부이며 거기에 있으며 

00:12:09.200 --> 00:12:17.330
 안녕하세요 헬로 월드가 여기로 돌아 왔으니 이제 변경 한 척하겠습니다 

00:12:17.330 --> 00:12:20.750
 다른 컴퓨터에서 다른 곳에서 브라우저를 통해이 작업을 수행합니다. 

00:12:20.750 --> 00:12:29.270
 이 시스템에서 보여 드리기 위해 다시 에코 에코를하겠습니다. 

00:12:29.270 --> 00:12:33.680
 나는 그 변경 사항을 저장하고 이름이나 다른 것을주지 않을 것입니다. 

00:12:33.680 --> 00:12:37.340
 설명은 이제 확인하겠습니다. 이제 스크립트가 그렇게 보입니다. 

00:12:37.340 --> 00:12:41.600
 브라우저에서 어떻게 변경합니까? 지금이라면 어디서나 할 수 있습니다. 

00:12:41.600 --> 00:12:47.510
 저장소의 컴퓨터에서 로컬로 파일을 봅니다. 

00:12:47.510 --> 00:12:53.630
 그냥 hello world okay라고 말해서 다시 가져와야 겠어 

00:12:53.630 --> 00:12:58.700
 내 밑줄 테스트 폴더 안에 git pull이 있으면 

00:12:58.700 --> 00:13:02.510
 다른 곳에서 변경 한 내용을 내 컴퓨터로 가져 와서 

00:13:02.510 --> 00:13:07.460
 Nano를 열고 해당 파일을 열면 항상 변경 사항을 동기화합니다. 

00:13:07.460 --> 00:13:14.000
 새로운 안녕하세요가 이제 그 일부이므로 에코를 보여 드리겠습니다. 

00:13:14.000 --> 00:13:20.270
 세 번 안녕하세요. 저장하고 이제는 정확히하겠습니다. 

00:13:20.270 --> 00:13:22.400
 똑같지 만 지금 어떻게 다른지 보여주지 

00:13:22.400 --> 00:13:28.490
 이미 내 이름과 이메일 주소를 입력했는데 Ad Star에 커밋이 표시됩니다. 

00:13:28.490 --> 00:13:39.410
 최종 업데이트는 푸시 원산지 마스터 캡 5입니다 TV는 내 사용자 이름과 암호입니다 

00:13:39.410 --> 00:13:50.120
 무작위로 선택된 약 64 자의 문자열이며 붙여 넣을 것입니다. 

00:13:50.120 --> 00:13:56.060
 거기에 우리가 갈 수 있도록 이제 내 변화를 추진하기 위해 모든 것이 있습니다. 

00:13:56.060 --> 00:14:00.680
 github 서버에 로컬로 연결하여 다른 사람과 다시 공유하거나 

00:14:00.680 --> 00:14:05.510
 다른 시스템과 함께 사용하면 풀림을 할 수 있습니다. 

00:14:05.510 --> 00:14:09.980
 git clone 뭔가를 용서하고 내 것이 될 필요는 없습니다. 

00:14:09.980 --> 00:14:14.690
 공개 된 한 다른 사람의 github 저장소 

00:14:14.690 --> 00:14:19.070
 내 로컬 컴퓨터에서 변경 한 다음 푸시를 할 수 있습니다. 

00:14:19.070 --> 00:14:24.710
 누군가를 변화시키는 방법을 강요하기 위해 저장소 

00:14:24.710 --> 00:14:29.570
 다른 저장소는 그것을 포크하여 저장소로 갈 때 클릭하십시오. 

00:14:29.570 --> 00:14:34.040
 포크라고 불리는 버튼은 기본적으로 자신의 계정에 사본을 만듭니다. 

00:14:34.040 --> 00:14:37.550
 변경을 수행 한 다음 풀 요청을 수행 할 수 있습니다. 

00:14:37.550 --> 00:14:41.000
 하지만 이것들은 당신을 시작할 수있는 기초입니다. 

00:14:41.000 --> 00:14:45.680
 리포지토리 생성 파일 업로드 코드를 조작하여 조작 가능 

00:14:45.680 --> 00:14:49.250
 모든 시스템에서 Windows 시스템의 Raspberry Pi에서 테스트 할 수 있습니다. 

00:14:49.250 --> 00:14:54.410
 무엇이든 Linux 데스크톱에서 모든 변경 사항을 

00:14:54.410 --> 00:14:59.030
 서버를 다운로드하여 모든 시스템에 다운로드하거나 가져올 수 있습니다. 

00:14:59.030 --> 00:15:01.810
 거기에있는 모든 것 

00:15:07.430 --> 00:15:10.480
 [음악] 

