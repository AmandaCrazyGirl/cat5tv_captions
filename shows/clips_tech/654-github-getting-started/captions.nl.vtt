WEBVTT
Kind: captions
Language: nl

00:00:01.520 --> 00:00:07.200
 als je nog nooit bij ons bent geweest voor een community-koffiepauze van categorie 5, zul je dat doen 

00:00:07.200 --> 00:00:11.490
 Lees er meer over op categorie-5-punt-tv, scrol gewoon naar beneden op de startpagina 

00:00:11.490 --> 00:00:15.570
 en je zult de gemeenschappelijke koffiepauze daar zien, samen met ons schema wanneer 

00:00:15.570 --> 00:00:19.920
 we gaan de volgende doen, het is een wekelijks evenement dat we op zoom houden ' 

00:00:19.920 --> 00:00:23.430
 en het is een kans voor onze gemeenschap om samen te komen en zelfs 

00:00:23.430 --> 00:00:29.189
 hoewel we allemaal ervaren wat we vandaag in onze wereld ervaren, hebben we 

00:00:29.189 --> 00:00:35.370
 nam de benadering om te zeggen in plaats van over die dingen de dingen te praten 

00:00:35.370 --> 00:00:40.260
 die ons nu naar beneden halen, laten we ernaar kijken en zeggen dat we allemaal zijn 

00:00:40.260 --> 00:00:47.039
 vast in deze situatie, wat is wat ik doe dat me opwindt 

00:00:47.039 --> 00:00:52.010
 wat is het waarmee ik technologisch experimenteer dat is echt 

00:00:52.010 --> 00:00:56.489
 interessant voor mij en helpt me tijd te besteden, of ik nu thuis zit 

00:00:56.489 --> 00:01:03.989
 nu of wat het geval ook is, dus het onderwerp kwam over github omdat 

00:01:03.989 --> 00:01:10.380
 we hebben het over programmeren en Peter is er bijna altijd voor een 

00:01:10.380 --> 00:01:14.580
 gemeenschap koffiepauze en Peter vroeg goed hoe gebruik je github goed 

00:01:14.580 --> 00:01:18.750
 niet echt iets dat we kunnen laten zien of praten, weet je 

00:01:18.750 --> 00:01:22.799
 door op de koffiepauze maar het kwam naar voren dat hey dat zou echt zijn 

00:01:22.799 --> 00:01:27.330
 goed onderwerp om te bespreken op categorie vijf technologie-tv en de reden daarvoor 

00:01:27.330 --> 00:01:34.350
 kwam in eerste instantie omdat omdat Microsoft github kocht, ze het bewaarden 

00:01:34.350 --> 00:01:39.570
 ging een soort status quo zoals het was en je moest betalen voor bepaalde functies, maar 

00:01:39.570 --> 00:01:48.240
 toen zei heel plotseling heel recent Microsoft en al degenen die voor functies betaalden niet 

00:01:48.240 --> 00:01:51.899
 allemaal, maar veel daarvan betaalden voor functies die u vroeger moest betalen 

00:01:51.899 --> 00:01:55.500
 want ze zijn nu gratis, dus ze nemen de service en ze zijn eigenlijk 

00:01:55.500 --> 00:02:00.659
 het weggeven van hun premium service helemaal gratis bij github com dus wat is 

00:02:00.659 --> 00:02:06.600
 github nou github is een soort van cloud service provider, maar toch is het voor 

00:02:06.600 --> 00:02:10.800
 ontwikkelaars helpt het ons om onze projecten te kunnen managen zodat u kunt gaan 

00:02:10.800 --> 00:02:15.050
 terug in de tijd met code en het is echt nuttig om dat te kunnen 

00:02:15.050 --> 00:02:20.540
 zie die toezeggingen en zie hoe veranderingen uw project hebben beïnvloed, het is ook een 

00:02:20.540 --> 00:02:26.330
 geweldig opslagmechanisme voor uw code omdat u deze kunt delen 

00:02:26.330 --> 00:02:30.350
 andere mensen als je wilt dat Microsoft het natuurlijk gratis maakt 

00:02:30.350 --> 00:02:37.640
 u kunt nu ook gratis privérepository's hebben en u kunt instellen 

00:02:37.640 --> 00:02:41.300
 zoveel teams als je wilt als je wilt samenwerken met andere programmeurs maar 

00:02:41.300 --> 00:02:45.920
 wat het in feite voor mij doet, is dat ik mijn code online kan delen 

00:02:45.920 --> 00:02:49.459
 zodanig dat andere mensen het open source kunnen gebruiken, kunnen ze het compileren of gebruiken 

00:02:49.459 --> 00:02:55.459
 of ze draaien het op hun eigen computers en als ze beslissen, ach, dan heb ik liever 

00:02:55.459 --> 00:02:59.510
 het werkt op deze manier of misschien is hier een bug en kan ik oplossen dat ze kunnen doen wat 

00:02:59.510 --> 00:03:05.390
 belde een pull-verzoek, dus in feite klonen ze mijn github-repository mijn software 

00:03:05.390 --> 00:03:10.730
 code ze repareren het op hun computer en vervolgens doen ze een pull-verzoek dat pusht 

00:03:10.730 --> 00:03:16.100
 het terug terwijl ze het terug naar hun vork duwen en dan creëert het een trekverzoek 

00:03:16.100 --> 00:03:21.709
 voor mij zodat ik zie dat hey Joe hun bug zal oplossen met mijn 

00:03:21.709 --> 00:03:26.720
 software Ik kan op een knop klikken en het zal die fix dus in mijn software importeren 

00:03:26.720 --> 00:03:33.890
 er komt heel veel bij kijken en het is echt zo krachtig dat het kan zijn 

00:03:33.890 --> 00:03:37.519
 verwarrend, vooral als je begint te pletten en ze en die samen te voegen 

00:03:37.519 --> 00:03:41.390
 dingen waar we vandaag niet op ingaan, maar wat ik wel wil 

00:03:41.390 --> 00:03:47.150
 laten zien hoe de meest elementaire kennis over hoe het werkt gaat 

00:03:47.150 --> 00:03:53.720
 sta je toe om github op een effectieve manier te gebruiken, beschouw het als dat waar je bent 

00:03:53.720 --> 00:03:58.519
 het plaatsen van uw code als open source-software en dat hoeft niet zo te zijn 

00:03:58.519 --> 00:04:03.470
 je kunt het privé hebben als je wilt, maar in mijn geval wil ik dat 

00:04:03.470 --> 00:04:07.130
 mensen die af en toe met mij samenwerken, misschien plaatsen ze problemen 

00:04:07.130 --> 00:04:10.430
 als ze een bug vinden en dan ben ik nog steeds de persoon die het moet repareren, maar op 

00:04:10.430 --> 00:04:15.590
 in ieder geval komt mijn gemeenschap in mijn softwarebibliotheek en zegt dat dit een 

00:04:15.590 --> 00:04:21.769
 probleem en je moet het in orde maken, dus github kalm is waar je naartoe gaat is teken 

00:04:21.769 --> 00:04:26.360
 voor je gratis account hoef je alleen maar op de link te klikken en te klikken 

00:04:26.360 --> 00:04:30.080
 meld je nu aan Ik heb al een account dus ik log in als mezelf 

00:04:30.080 --> 00:04:37.789
 en meld je aan zodat je hier kunt zien dat als ik naar mijn opslagplaatsen ga, dus als ik spring 

00:04:37.789 --> 00:04:47.569
 thuis hier en ga om het hier te laten laden laat het goed laden ik ga gewoon 

00:04:47.569 --> 00:04:56.000
 rechtstreeks naar cat 5 TV is waar ik al mijn software host, dus ga daarheen 

00:04:56.000 --> 00:04:58.909
 github.com slash cat 5 tv en je ziet hoe dit werkt 

00:04:58.909 --> 00:05:02.779
 dus je kunt zien dat ik een heleboel softwarebronnen heb en dat zijn ze allemaal 

00:05:02.779 --> 00:05:07.099
 verschillende projecten allemaal verschillende dingen die ik heb gedaan of waar ik mee bezig ben 

00:05:07.099 --> 00:05:12.889
 te doen en er zijn pagina's en pagina's en pagina's ervan, dus als je eenmaal je github hebt 

00:05:12.889 --> 00:05:19.340
 account kunt u inloggen op wat u hier ziet, wat mijn lijst met opslagplaatsen is, maar 

00:05:19.340 --> 00:05:23.090
 wanneer u zich voor het eerst aanmeldt, zult u niet al deze hebben die u moet maken 

00:05:23.090 --> 00:05:26.750
 je eerste repository, dus de manier waarop ik dat ga doen, begrijp nu 

00:05:26.750 --> 00:05:33.289
 github is niet vereist vergeet ok en git is niet hetzelfde als github github is een 

00:05:33.289 --> 00:05:39.919
 online service en beschouw het als cloudopslag vergeet ok het is niet hetzelfde 

00:05:39.919 --> 00:05:46.400
 ding is het een online opslag voor die open-source tool voor pakketbeheer of een 

00:05:46.400 --> 00:05:50.960
 project management tool dus hier op github hebben ze het echt echt gemaakt 

00:05:50.960 --> 00:05:55.400
 eenvoudig om eenvoudig een nieuwe repository te zeggen, dus ik ben naar mijn repositories gegaan en ik heb 

00:05:55.400 --> 00:05:59.360
 klikte op nieuw en dan geef ik het een naam die ik dit ga noemen 

00:05:59.360 --> 00:06:07.419
 een mijn underscore-test en een optionele beschrijving dit is een test voor de show 

00:06:07.419 --> 00:06:12.800
 of u wilt dat het openbaar of privé is en initialiseer het vervolgens met een 

00:06:12.800 --> 00:06:17.029
 readme het is altijd het beste om te doen dat het ervoor zorgt dat mensen er toegang toe hebben 

00:06:17.029 --> 00:06:20.839
 meteen inclusief jezelf je wilt een licentie toevoegen wil je er een toevoegen 

00:06:20.839 --> 00:06:24.740
 git negeer Ik laat beide leeg, je zult ontdekken wat dat betekent 

00:06:24.740 --> 00:06:30.680
 de toekomst en maak je repository, dus nu heb ik er een genaamd mijn underscore-test 

00:06:30.680 --> 00:06:34.459
 maar er is niets en ik ben klaar met de browser, dus nu wat ik ga doen 

00:06:34.459 --> 00:06:39.830
 wat ik moet doen is mijn terminal oproepen en in mijn terminal ga ik 

00:06:39.830 --> 00:06:43.320
 typ oké zodat je kunt zien dat ik 

00:06:43.320 --> 00:06:48.330
 heb het al geïnstalleerd als je niet hoeft te worden geïnstalleerd, dus ik gebruik Linux 

00:06:48.330 --> 00:06:53.460
 Debian Linux hier kun je apt install git typen, dat is wat je gaat doen 

00:06:53.460 --> 00:07:05.640
 type Ik ben niet onbeleefd sudo su ingelogd is rock ok apt installatie maar het zal het vertellen 

00:07:05.640 --> 00:07:09.660
 ik dat ik de stroom al heb oh er is een nee nee ik heb het al 

00:07:09.660 --> 00:07:13.500
 er zijn echter nog andere updates voor mij maar get is al de nieuwste versie dus 

00:07:13.500 --> 00:07:17.430
 als je het niet hebt moet je het installeren als je op een RPM gebaseerd bent 

00:07:17.430 --> 00:07:22.980
 systeem zal het yum install git zijn en je kunt het ook vinden in je GUI 

00:07:22.980 --> 00:07:28.740
 repository manager uw pakketbeheerder of wat u ook gebruikt, zoals een synaptische 

00:07:28.740 --> 00:07:33.750
 pakketbeheer bijvoorbeeld, dus als je eenmaal geïnstalleerd bent, maak dan een map aan 

00:07:33.750 --> 00:07:41.100
 waarschijnlijk in uw thuismap en we zullen deze opslagplaatsen noemen zodat ik 

00:07:41.100 --> 00:07:46.290
 een plaats hebben waar ik altijd weet dat mijn code klopt, dus dit wordt een 

00:07:46.290 --> 00:07:52.650
 lokale kopie van mijn git-repository, dus nu ga ik git clone typen en we zijn 

00:07:52.650 --> 00:08:00.210
 ga deze URL kopiëren github.com slash cat 5 TV slash mijn onderstrepingstest zodat ik kan 

00:08:00.210 --> 00:08:08.010
 kopieer dat gewoon met ctrl C je zult eraan wennen om het gewoon te typen, het is jouw 

00:08:08.010 --> 00:08:13.560
 gebruikersnaam slash je repository en nu dus als ik naar mijn bestandssysteem kijk dus 

00:08:13.560 --> 00:08:20.760
 cloned get clone en dan de naam van de of de URL van de repository dus nu 

00:08:20.760 --> 00:08:25.920
 als ik naar mijn thuismap ga en dan in opslagplaatsen zie, is het eigendom van root 

00:08:25.920 --> 00:08:31.740
 omdat ik super user dude zie aanklagen, dus nu is er een map genaamd mijn test en 

00:08:31.740 --> 00:08:38.250
 binnen mijn test is er een bestand genaamd readme MD dus in deze map dus ik ben 

00:08:38.250 --> 00:08:43.250
 ga naar mijn test en ik wil een nieuw bestand maken dat ik dit ga noemen 

00:08:43.250 --> 00:08:50.970
 nano test dot SH en we zullen een snel SH-bestand maken om een ​​bash-script uit te voeren en 

00:08:50.970 --> 00:08:55.640
 Ik ga echo typen, hallo, hoe kan dat oh dat zou ik echt moeten doen 

00:08:55.640 --> 00:09:00.970
 blijf bij de norm hallo wereld, hoe is dat goed 

00:09:00.970 --> 00:09:05.690
 dus ik heb dat uitgeschreven en ik heb het gesloten, dus nu zie je dat er een bestand is genaamd 

00:09:05.690 --> 00:09:13.910
 test punt s H nu wanneer ik een bestand naar github overbreng, zijn de rechten 

00:09:13.910 --> 00:09:18.500
 zal worden opgenomen met die push, dus als ik dot slash test dot s H you 

00:09:18.500 --> 00:09:23.360
 merk op dat er toestemming is geweigerd Ik moet het uitvoerende uitvoerende alle chmod maken 

00:09:23.360 --> 00:09:30.680
 plus x testpunt s H dus nu als ik testpunt s HS s hallo wereld typ, dus ik nu 

00:09:30.680 --> 00:09:35.510
 heb mijn allereerste stukje script klaar om naar github te gaan, het maakt deel uit van mijn 

00:09:35.510 --> 00:09:41.870
 repository op mijn lokale computer, maar het staat nog niet in github, dus als je kijkt naar 

00:09:41.870 --> 00:09:45.500
 github Ik ga vernieuwen om te bewijzen dat je hier je bestandslijst ziet en 

00:09:45.500 --> 00:09:50.390
 er is nog steeds alleen de readme ok dus nu terug in mijn terminalvenster ga ik 

00:09:50.390 --> 00:09:56.330
 gebruik opnieuw dat git-commando. Ik ga een ster binnen de opslagplaatsen halen 

00:09:56.330 --> 00:10:01.270
 map die zegt vind alle bestanden die wijzigingen hebben en voeg ze toe ok krijgen 

00:10:01.270 --> 00:10:09.680
 commit - ben en geef dan tussen aanhalingstekens je commit een naam, dus ik zeg het 

00:10:09.680 --> 00:10:14.480
 mijn eerste script en dit zijn slechts korte beschrijvingen en druk op enter en 

00:10:14.480 --> 00:10:19.220
 nu zegt het hey dat je ons moet vertellen wie je bent, omdat je dat nog nooit hebt gedaan 

00:10:19.220 --> 00:10:24.380
 voer git eerder op deze computer uit, dus je moet deze twee opdrachten behoorlijk uitvoeren 

00:10:24.380 --> 00:10:29.030
 eenvoudig get config - - global je hoeft alleen maar 

00:10:29.030 --> 00:10:33.350
 doe dit een keer, maak je geen zorgen, dot e-mail van de gebruiker en als je problemen hebt om dat gewoon te typen 

00:10:33.350 --> 00:10:39.980
 kopieer het ok en dan tussen aanhalingstekens ga ik Robby in categorie 5 TV zetten en dat is 

00:10:39.980 --> 00:10:48.890
 Ik vertel het gewoon mijn e-mailadres en dan ga ik naar de naam van de gebruikerspunt die ik niet weet 

00:10:48.890 --> 00:10:52.550
 als je dat kunt horen, maar het is eigenlijk een heel zware storm buiten onze studio 

00:10:52.550 --> 00:10:56.720
 vandaag, zodat de lichten een paar keer flikkeren en ik denk dat we het zullen krijgen 

00:10:56.720 --> 00:11:02.090
 erdoorheen, hoe dan ook, verwijder dat en verander mijn naam in Robby 

00:11:02.090 --> 00:11:06.710
 Ferguson komt oké klaar dus dat hoef ik maar één keer te doen dus nu scene 

00:11:06.710 --> 00:11:11.420
 de volgende keer dat ik die git commit uitvoer, ben ik het gewoon aan het toevoegen 

00:11:11.420 --> 00:11:15.050
 dus ik heb het toegevoegd en het ziet dat er één bestand is veranderd, er zijn er twee 

00:11:15.050 --> 00:11:20.270
 invoegingen en testen SH is nieuw, dus het gaat dat creëren, dus nu de finale 

00:11:20.270 --> 00:11:26.450
 commando dat ik moet invoeren is get push origin en ik ga het specificeren 

00:11:26.450 --> 00:11:32.360
 master die de branchmaster is, dus origin master en nu gaat het 

00:11:32.360 --> 00:11:35.720
 vraag me naar mijn gebruikersnaam en wachtwoord die ik heb ingevoerd toen ik mijn aanmaakte 

00:11:35.720 --> 00:11:44.360
 account dus cat5 TV is mijn gebruikersnaam en mijn wachtwoord Ik gebruik LastPass en genereer nieuw 

00:11:44.360 --> 00:11:49.430
 wachtwoorden de hele tijd en ze zijn enorm en gek, dus ik heb een wachtwoord gekopieerd 

00:11:49.430 --> 00:11:57.500
 en dan heb ik het geplakt en daar gaat het die gegevens uploaden naar mijn 

00:11:57.500 --> 00:12:02.840
 repository en het is zo gedaan f5 om te vernieuwen en je zou de test SH moeten zien 

00:12:02.840 --> 00:12:09.200
 is nu onderdeel van mijn github-repository en daar is het en het laat zien dat het dat is 

00:12:09.200 --> 00:12:17.330
 executive hallo wereld, dus nu hier, dus laten we net doen of ik veranderingen heb aangebracht 

00:12:17.330 --> 00:12:20.750
 ergens anders op een andere computer en ik ga dit doen via de browser 

00:12:20.750 --> 00:12:29.270
 alleen om je dit te laten zien op dit systeem ga ik weer echo hallo oké en dan 

00:12:29.270 --> 00:12:33.680
 Ik ga die wijzigingen opslaan. Ik geef het geen naam of iets dergelijks 

00:12:33.680 --> 00:12:37.340
 die beschrijving ga ik gewoon bevestigen, dus nu ziet het script er zo uit, dus zie 

00:12:37.340 --> 00:12:41.600
 hoe ik dat ook in de browser verander, je kunt dit overal doen, dus nu als 

00:12:41.600 --> 00:12:47.510
 Ik bekijk mijn bestand lokaal op mijn computer in de repository daar gaan we nog steeds 

00:12:47.510 --> 00:12:53.630
 zegt gewoon hallo wereld, oké, dus ik ga weer trekken, ik doe dit allemaal 

00:12:53.630 --> 00:12:58.700
 in de my underscore-testmap, dus git pull gaat er dan naar zoeken 

00:12:58.700 --> 00:13:02.510
 wijzigingen die elders zijn aangebracht en ze naar mijn computer terugtrekken 

00:13:02.510 --> 00:13:07.460
 het synchroniseert altijd die veranderingen, dus als ik nu Nano open en dat bestand open 

00:13:07.460 --> 00:13:14.000
 je kunt zien dat nieuwe hallo nu daar deel van uitmaakt, dus ik laat je echo zien 

00:13:14.000 --> 00:13:20.270
 hallo keer drie en ik ga dat opslaan en nu ga ik precies hetzelfde doen 

00:13:20.270 --> 00:13:22.400
 hetzelfde maar laat je zien hoe het anders is nu 

00:13:22.400 --> 00:13:28.490
 Ik heb mijn naam en mijn e-mailadres al ingevoerd Ad Star get commit - 

00:13:28.490 --> 00:13:39.410
 ben laatste update krijg push origin master cap 5 TV is mijn gebruikersnaam en mijn wachtwoord 

00:13:39.410 --> 00:13:50.120
 is een reeks van ongeveer 64 willekeurig gekozen tekens en ik ga plakken 

00:13:50.120 --> 00:13:56.060
 dat in en daar gaan we dus dat is alles wat er is om nu mijn veranderingen door te voeren 

00:13:56.060 --> 00:14:00.680
 lokaal naar de github-server zodat deze het opnieuw deelt met iedereen of 

00:14:00.680 --> 00:14:05.510
 met mijn andere systemen als ik een get pull doe, zodat ik dat kan doen 

00:14:05.510 --> 00:14:09.980
 vergeef me git kloon iets en het hoeft niet van mij te zijn, het kan zijn 

00:14:09.980 --> 00:14:14.690
 de github-opslagplaats van iemand anders zolang het openbaar is, maar dan kan ik het maken 

00:14:14.690 --> 00:14:19.070
 verandert het op mijn lokale computer en dan kan ik een push doen, nu moet je het bezitten 

00:14:19.070 --> 00:14:24.710
 de repository om een ​​push te doen, zodat de manier om iemand te veranderen 

00:14:24.710 --> 00:14:29.570
 anders is de repository om het te splitsen, dus als je naar de repository gaat, klik je op 

00:14:29.570 --> 00:14:34.040
 de knop genaamd fork en het maakt in feite een kopie ervan in je eigen account 

00:14:34.040 --> 00:14:37.550
 waar u wijzigingen in kunt aanbrengen en dat is waar u pull-verzoeken kunt doen 

00:14:37.550 --> 00:14:41.000
 maar dat zijn de basisprincipes om u op weg te helpen, zodat u dat kunt 

00:14:41.000 --> 00:14:45.680
 maak repositories upload uw bestanden upload uw code om te kunnen manipuleren 

00:14:45.680 --> 00:14:49.250
 het vanaf elk systeem zodat je het kunt testen op een Raspberry Pi op je Windows-machine 

00:14:49.250 --> 00:14:54.410
 op je Linux-desktop op wat dan ook en push al die wijzigingen naar de 

00:14:54.410 --> 00:14:59.030
 server zodat ze kunnen worden gedownload of naar al uw systemen kunnen worden getrokken, dus dat is het 

00:14:59.030 --> 00:15:01.810
 alles is er aan de hand 

00:15:07.430 --> 00:15:10.480
 [Muziek] 

