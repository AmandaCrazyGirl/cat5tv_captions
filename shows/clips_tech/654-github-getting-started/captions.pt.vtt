WEBVTT
Kind: captions
Language: pt

00:00:01.520 --> 00:00:07.200
 Agora, se você nunca se juntou a nós para um coffee break comunitário de categoria 5, 

00:00:07.200 --> 00:00:11.490
 Saiba mais sobre isso na categoria cinco pontos da TV, basta rolar para baixo na página inicial 

00:00:11.490 --> 00:00:15.570
 e você verá o café comunitário quebrar lá junto com a nossa programação quando 

00:00:15.570 --> 00:00:19.920
 nós vamos fazer o próximo, é um evento semanal que mantemos no zoom ' 

00:00:19.920 --> 00:00:23.430
 e é uma oportunidade para a nossa comunidade se reunir e até 

00:00:23.430 --> 00:00:29.189
 embora todos nós estamos experimentando o que estamos experimentando em nosso mundo hoje temos 

00:00:29.189 --> 00:00:35.370
 adotou a abordagem para dizer, em vez de falar sobre essas coisas as coisas 

00:00:35.370 --> 00:00:40.260
 que estão nos derrubando agora, vamos dar uma olhada e dizer: olha, somos todos 

00:00:40.260 --> 00:00:47.039
 preso nesta situação o que é o que estou fazendo que me deixa animado 

00:00:47.039 --> 00:00:52.010
 o que é que eu estou experimentando tecnologicamente isso é realmente 

00:00:52.010 --> 00:00:56.489
 interessante para mim e me ajudando a ocupar tempo, estando preso em casa 

00:00:56.489 --> 00:01:03.989
 agora ou seja qual for o caso, então o tópico surgiu sobre o github porque 

00:01:03.989 --> 00:01:10.380
 estamos falando de programação e Peter está lá quase sempre para uma 

00:01:10.380 --> 00:01:14.580
 coffee break comunitário e Peter estava perguntando bem como você usa o github bem 

00:01:14.580 --> 00:01:18.750
 Na verdade, eles não são a coisa que podemos mostrar ou conversar você sabe andar com você 

00:01:18.750 --> 00:01:22.799
 através da pausa para o café, mas surgiu que, ei, isso seria realmente 

00:01:22.799 --> 00:01:27.330
 bom tópico para discutir sobre a categoria cinco de TV de tecnologia e a razão pela qual 

00:01:27.330 --> 00:01:34.350
 surgiu inicialmente porque quando a Microsoft comprou o github eles o mantiveram 

00:01:34.350 --> 00:01:39.570
 indo tipo de status quo como era e você teve que pagar por certos recursos, mas 

00:01:39.570 --> 00:01:48.240
 de repente, muito recentemente, a Microsoft disse e todos aqueles pagos por recursos não 

00:01:48.240 --> 00:01:51.899
 todos eles, mas muitos pagam por recursos que você costumava pagar 

00:01:51.899 --> 00:01:55.500
 pois agora são gratuitos, então eles estão prestando o serviço e estão basicamente 

00:01:55.500 --> 00:02:00.659
 dando o seu serviço premium absolutamente gratuito no github com então o que é 

00:02:00.659 --> 00:02:06.600
 github bem github é como um provedor de serviços em nuvem por ainda é para 

00:02:06.600 --> 00:02:10.800
 desenvolvedores nos ajuda a gerenciar nossos projetos para que você possa ir 

00:02:10.800 --> 00:02:15.050
 de volta no tempo, basicamente, com código e é realmente útil poder 

00:02:15.050 --> 00:02:20.540
 veja esses commits e veja como as mudanças afetaram seu projeto, também é uma 

00:02:20.540 --> 00:02:26.330
 ótimo mecanismo de armazenamento para o seu código, porque você pode compartilhá-lo com 

00:02:26.330 --> 00:02:30.350
 outras pessoas, se você quiser agora, é claro, a Microsoft tornando-o gratuito 

00:02:30.350 --> 00:02:37.640
 agora você também pode ter repositórios particulares gratuitos e pode configurar 

00:02:37.640 --> 00:02:41.300
 quantas equipes você quiser se quiser colaborar com outros programadores, mas 

00:02:41.300 --> 00:02:45.920
 essencialmente o que ele faz para mim é que me permite compartilhar meu código on-line em 

00:02:45.920 --> 00:02:49.459
 de forma que outras pessoas possam usá-lo de código aberto, eles podem compilá-lo ou usar 

00:02:49.459 --> 00:02:55.459
 ou executá-lo em seus próprios computadores e, em seguida, se eles decidirem oh bem, eu prefiro 

00:02:55.459 --> 00:02:59.510
 funciona dessa maneira ou talvez aqui esteja um bug e eu posso corrigir que eles podem fazer o que 

00:02:59.510 --> 00:03:05.390
 chamado de solicitação pull, então basicamente eles clonam meu repositório github meu software 

00:03:05.390 --> 00:03:10.730
 código eles corrigem isso em seu computador e, em seguida, eles fazem uma solicitação pull que empurra 

00:03:10.730 --> 00:03:16.100
 de volta enquanto o empurram de volta ao garfo e, em seguida, cria uma solicitação de recebimento 

00:03:16.100 --> 00:03:21.709
 para mim, para que eu veja que ei Joe vai soprar sua correção esse bug com o meu 

00:03:21.709 --> 00:03:26.720
 software, posso clicar em um botão e ele será importado para o meu software, 

00:03:26.720 --> 00:03:33.890
 há muito a fazer e é realmente muito poderoso que pode ser 

00:03:33.890 --> 00:03:37.519
 confuso, especialmente quando você começa a esmagar e mesclar eles e aqueles 

00:03:37.519 --> 00:03:41.390
 tipos de coisas que não vamos entrar hoje, mas o que eu quero 

00:03:41.390 --> 00:03:47.150
 mostrar a você como o conhecimento mais básico sobre como funciona vai 

00:03:47.150 --> 00:03:53.720
 permitem que você use o github de maneira eficaz, pense nele como aquele em que você está 

00:03:53.720 --> 00:03:58.519
 colocando seu código como um software de código aberto e não precisa ser 

00:03:58.519 --> 00:04:03.470
 você pode tê-lo privado, se quiser, mas no meu caso é isso que estou fazendo, quero 

00:04:03.470 --> 00:04:07.130
 pessoas para colaborar comigo ocasionalmente, talvez eles publiquem problemas 

00:04:07.130 --> 00:04:10.430
 se eles encontrarem um bug e eu ainda sou a pessoa que precisa corrigi-lo, mas 

00:04:10.430 --> 00:04:15.590
 menos minha comunidade está entrando no meu repositório de software e dizendo que este é um 

00:04:15.590 --> 00:04:21.769
 problema e você precisa consertar tudo certo, então o github calm é onde você vai é sinal 

00:04:21.769 --> 00:04:26.360
 para a sua conta gratuita, tudo o que você precisa fazer é clicar no link e clicar 

00:04:26.360 --> 00:04:30.080
 cadastre-se agora eu já tenho uma conta, então eu vou entrar como eu 

00:04:30.080 --> 00:04:37.789
 e entre para poder ver aqui que, se eu for aos meus repositórios, se eu pular 

00:04:37.789 --> 00:04:47.569
 casa aqui e vá para deixá-lo carregar aqui, deixe carregar tudo bem, eu só vou 

00:04:47.569 --> 00:04:56.000
 direto para cat 5 TV é onde eu hospedo todo o meu software para que você vá lá 

00:04:56.000 --> 00:04:58.909
 github.com barra cat 5 TV e você vê como isso funciona 

00:04:58.909 --> 00:05:02.779
 para que você possa ver que tenho uma tonelada de repositórios de software e todos eles 

00:05:02.779 --> 00:05:07.099
 projetos diferentes todas as coisas diferentes que eu fiz ou que continuo 

00:05:07.099 --> 00:05:12.889
 fazer e há páginas e páginas e páginas dele, assim que você tiver seu github 

00:05:12.889 --> 00:05:19.340
 conta, você pode fazer login no que vê aqui, que é minha lista de repositórios, mas 

00:05:19.340 --> 00:05:23.090
 quando você se inscrever, você não terá todas essas informações necessárias para criar 

00:05:23.090 --> 00:05:26.750
 seu primeiro repositório para a maneira que eu vou fazer isso agora entender 

00:05:26.750 --> 00:05:33.289
 o github não é necessário, esqueça ok e o git não é o mesmo que o github github é um 

00:05:33.289 --> 00:05:39.919
 serviço on-line e pense nisso como armazenamento em nuvem esqueça ok, não é o mesmo 

00:05:39.919 --> 00:05:46.400
 coisa é um armazenamento on-line para essa ferramenta de gerenciamento de pacotes de código aberto ou um 

00:05:46.400 --> 00:05:50.960
 ferramenta de gerenciamento de projetos então aqui no github eles fizeram isso realmente 

00:05:50.960 --> 00:05:55.400
 fácil simplesmente dizer novo repositório, então eu fui para os meus repositórios e eu tenho 

00:05:55.400 --> 00:05:59.360
 clicou em novo e então eu vou dar um nome que eu vou chamar isso 

00:05:59.360 --> 00:06:07.419
 um meu teste de sublinhado e uma descrição opcional este é um teste para o show 

00:06:07.419 --> 00:06:12.800
 se você quer que seja público ou privado e, em seguida, inicialize-o com um 

00:06:12.800 --> 00:06:17.029
 leia-me, é sempre melhor fazer isso, é para que as pessoas possam acessá-lo 

00:06:17.029 --> 00:06:20.839
 imediatamente, incluindo você mesmo, você deseja adicionar uma licença, deseja adicionar um 

00:06:20.839 --> 00:06:24.740
 git ignore eu vou deixar os dois vazios você vai descobrir o que isso significa 

00:06:24.740 --> 00:06:30.680
 o futuro e crie seu repositório, então agora eu tenho um chamado meu teste de sublinhado 

00:06:30.680 --> 00:06:34.459
 mas não há nada lá e eu terminei com o navegador então agora o que eu vou 

00:06:34.459 --> 00:06:39.830
 fazer é abrir o meu terminal e no meu terminal vou 

00:06:39.830 --> 00:06:43.320
 digite ficar bem para que você possa ver que eu tenho 

00:06:43.320 --> 00:06:48.330
 já o instalei se você não tiver sido instalado, então eu estou no Linux, estou no 

00:06:48.330 --> 00:06:53.460
 Debian Linux aqui, você pode digitar apt install git, é isso que você irá 

00:06:53.460 --> 00:07:05.640
 tipo eu não sou rude sudo su logado é rock ok apt instalar ainda vai dizer 

00:07:05.640 --> 00:07:09.660
 me que eu já tenho a corrente oh não há um não não, eu já entendi 

00:07:09.660 --> 00:07:13.500
 existem outras atualizações para mim, mas o get já é a versão mais recente, 

00:07:13.500 --> 00:07:17.430
 se você não o tiver, precisará instalá-lo se estiver usando um RPM 

00:07:17.430 --> 00:07:22.980
 sistema será yum instalar git e você também pode encontrá-lo na sua GUI 

00:07:22.980 --> 00:07:28.740
 gerenciador de repositório seu gerenciador de pacotes ou o que você usar como algum sináptico 

00:07:28.740 --> 00:07:33.750
 gerenciador de pacotes, por exemplo, assim que você tiver instalado, crie uma pasta 

00:07:33.750 --> 00:07:41.100
 provavelmente na sua pasta pessoal e chamaremos esses repositórios apenas para que eu 

00:07:41.100 --> 00:07:46.290
 tem um lugar onde eu sempre sei que meu código está certo, então isso vai ser um 

00:07:46.290 --> 00:07:52.650
 cópia local do meu repositório git então agora eu vou digitar git clone e estamos 

00:07:52.650 --> 00:08:00.210
 vou copiar este URL github.com barra gato 5 barra barra meu teste de sublinhado para que eu possa 

00:08:00.210 --> 00:08:08.010
 copiar que apenas com Ctrl C você vai se acostumar a digitar é a sua 

00:08:08.010 --> 00:08:13.560
 nome de usuário barra seu repositório e agora, se eu olhar para o meu sistema de arquivos por isso é 

00:08:13.560 --> 00:08:20.760
 clonado get clone e, em seguida, o nome do ou o URL do repositório agora 

00:08:20.760 --> 00:08:25.920
 se eu for para a minha pasta pessoal e depois para os repositórios, observe que ele pertence à raiz 

00:08:25.920 --> 00:08:31.740
 porque eu vejo super usuário cara para processar então agora há uma pasta chamada meu teste e 

00:08:31.740 --> 00:08:38.250
 dentro do meu teste, há um arquivo chamado MD Leia-me, então, nesta pasta, então eu sou 

00:08:38.250 --> 00:08:43.250
 vou entrar no meu teste e quero criar um novo arquivo que chamarei isso 

00:08:43.250 --> 00:08:50.970
 nano ponto de teste SH e criaremos um arquivo SH rápido para executar um script bash e 

00:08:50.970 --> 00:08:55.640
 Eu vou digitar eco oi lá como é que oh eu realmente 

00:08:55.640 --> 00:09:00.970
 ficar com o mundo Olá norma como está tudo bem 

00:09:00.970 --> 00:09:05.690
 então eu escrevi isso e fechei, agora você vê que existe um arquivo chamado 

00:09:05.690 --> 00:09:13.910
 ponto de teste s H agora, quando transfiro um arquivo para o github, as permissões são 

00:09:13.910 --> 00:09:18.500
 vai ser incluído com esse impulso, por isso, se eu fizer pontos de teste de barra s H você 

00:09:18.500 --> 00:09:23.360
 observe que diz permissão negada eu preciso torná-lo executivo executivo todo chmod 

00:09:23.360 --> 00:09:30.680
 mais x ponto de teste s H então agora se eu digitar teste ponto s HS s Olá mundo, então agora 

00:09:30.680 --> 00:09:35.510
 tenho meu primeiro pedaço de script pronto para ir ao github, é parte do meu 

00:09:35.510 --> 00:09:41.870
 repositório no meu computador local, mas ainda não está no github, então se você olhar 

00:09:41.870 --> 00:09:45.500
 github eu vou atualizar apenas para provar que você vê sua lista de arquivos aqui e 

00:09:45.500 --> 00:09:50.390
 ainda há apenas o leia-me ok então agora de volta na minha janela do terminal eu vou 

00:09:50.390 --> 00:09:56.330
 Mais uma vez, use o comando git. Vou adicionar estrelas nos repositórios. 

00:09:56.330 --> 00:10:01.270
 pasta que está dizendo, encontre todos os arquivos com alterações e adicione-os ok, obtenha 

00:10:01.270 --> 00:10:09.680
 commit - am e, depois, entre aspas, dê um nome ao seu commit, então eu vou dizer 

00:10:09.680 --> 00:10:14.480
 meu primeiro script e estas são apenas pequenas descrições e pressione enter e 

00:10:14.480 --> 00:10:19.220
 agora está dizendo, ei, você precisa nos dizer quem você é, porque você nunca 

00:10:19.220 --> 00:10:24.380
 execute o git neste computador antes, então você precisa executar esses dois comandos bastante 

00:10:24.380 --> 00:10:29.030
 simples obter configuração - - global, você só precisa 

00:10:29.030 --> 00:10:33.350
 faça isso uma vez, não se preocupe com o email do usuário e se você tiver problemas para digitar 

00:10:33.350 --> 00:10:39.980
 copie-o ok e depois entre aspas eu vou colocar Robby na categoria 5 TV e é isso 

00:10:39.980 --> 00:10:48.890
 apenas dizendo o meu endereço de e-mail, então eu vou ir nome do ponto de usuário que eu não sei 

00:10:48.890 --> 00:10:52.550
 se você pode ouvir isso, mas é realmente uma tempestade muito ruim fora do nosso estúdio 

00:10:52.550 --> 00:10:56.720
 hoje, então as luzes estão piscando algumas vezes e mas acho que vamos conseguir 

00:10:56.720 --> 00:11:02.090
 de qualquer maneira, então tudo bem exclua isso e mude meu nome para Robby 

00:11:02.090 --> 00:11:06.710
 Ferguson entrar ok feito, então eu só tenho que fazer isso uma vez agora cena 

00:11:06.710 --> 00:11:11.420
 da próxima vez que eu executar esse commit do git - estou apenas adicionando tudo bem 

00:11:11.420 --> 00:11:15.050
 então eu adicionei e ele vê que um arquivo mudou, existem dois 

00:11:15.050 --> 00:11:20.270
 inserções e testar SH é novo, por isso vai criar isso agora a final 

00:11:20.270 --> 00:11:26.450
 comando que eu preciso inserir é obter origem push e eu vou especificar o 

00:11:26.450 --> 00:11:32.360
 mestre que é o mestre da filial, então mestre de origem e agora ele vai 

00:11:32.360 --> 00:11:35.720
 solicite meu nome de usuário e senha que digitei quando criei meu 

00:11:35.720 --> 00:11:44.360
 conta, então cat5 TV é meu nome de usuário e minha senha. Eu uso o LastPass e gero novos 

00:11:44.360 --> 00:11:49.430
 senhas o tempo todo e elas são enormes e loucas, então eu copiei uma senha 

00:11:49.430 --> 00:11:57.500
 e então eu colei e lá vai ele está enviando esses dados para o meu 

00:11:57.500 --> 00:12:02.840
 repositório e está feito tão f5 para atualizar e você deve ver o teste SH 

00:12:02.840 --> 00:12:09.200
 agora faz parte do meu repositório github e lá está e mostra que é 

00:12:09.200 --> 00:12:17.330
 Olá executivo mundo agora aqui de volta, então vamos fingir que fiz alterações 

00:12:17.330 --> 00:12:20.750
 em outro lugar, em outro computador e eu vou fazer isso através do navegador 

00:12:20.750 --> 00:12:29.270
 apenas para mostrar a você neste sistema eu irei ecoar olá novamente tudo bem e então 

00:12:29.270 --> 00:12:33.680
 Vou salvar essas mudanças, não vou dar um nome ou algo assim 

00:12:33.680 --> 00:12:37.340
 essa descrição eu só vou confirmar então agora o script se parece com isso, então veja 

00:12:37.340 --> 00:12:41.600
 como eu mudo isso no navegador, você também pode fazer isso de qualquer lugar agora, se 

00:12:41.600 --> 00:12:47.510
 Eu olho para o meu arquivo localmente no meu computador no repositório lá vamos nós ainda 

00:12:47.510 --> 00:12:53.630
 apenas diz olá mundo ok, então eu vou me puxar novamente Eu estou fazendo tudo isso 

00:12:53.630 --> 00:12:58.700
 dentro da minha pasta de teste de sublinhado, então o git pull vai procurar qualquer 

00:12:58.700 --> 00:13:02.510
 alterações que foram feitas em outro lugar e puxe-as para o meu computador para 

00:13:02.510 --> 00:13:07.460
 está sempre sincronizando essas alterações agora, se eu abrir o Nano e abrir esse arquivo 

00:13:07.460 --> 00:13:14.000
 você pode ver que o novo olá novamente agora faz parte disso, então eu vou lhe mostrar eco 

00:13:14.000 --> 00:13:20.270
 Olá três vezes e eu vou salvar isso e agora eu vou fazer exatamente 

00:13:20.270 --> 00:13:22.400
 mesma coisa, mas mostrar como é diferente agora que 

00:13:22.400 --> 00:13:28.490
 Eu já digitei meu nome e meu endereço de e-mail para obter o Ad Star e confirmar - 

00:13:28.490 --> 00:13:39.410
 sou atualização final obter push master master cap 5 TV é meu nome de usuário e minha senha 

00:13:39.410 --> 00:13:50.120
 é uma sequência de cerca de 64 caracteres selecionados aleatoriamente e eu vou colar 

00:13:50.120 --> 00:13:56.060
 isso e lá vamos nós, então isso é tudo o que há para agora empurrar minhas mudanças 

00:13:56.060 --> 00:14:00.680
 localmente no servidor github para que o compartilhe novamente com todos os outros 

00:14:00.680 --> 00:14:05.510
 com meus outros sistemas quando eu faço um puxão, então, ao fazer isso, posso clomp 

00:14:05.510 --> 00:14:09.980
 perdoe-me clone git algo e não tem que ser meu, pode ser 

00:14:09.980 --> 00:14:14.690
 repositório github de outra pessoa, desde que seja público, mas então eu posso fazer 

00:14:14.690 --> 00:14:19.070
 muda para ele na minha máquina local e então eu posso fazer um empurrão agora você tem que possuir 

00:14:19.070 --> 00:14:24.710
 o repositório para fazer um push, de modo a fazer alterações em alguém 

00:14:24.710 --> 00:14:29.570
 o repositório de outra pessoa é bifurcá-lo. Quando você vai ao repositório, clica em 

00:14:29.570 --> 00:14:34.040
 o botão chamado fork e basicamente faz uma cópia dele em sua própria conta 

00:14:34.040 --> 00:14:37.550
 que você pode fazer alterações e é aí que você pode fazer solicitações pull 

00:14:37.550 --> 00:14:41.000
 mas esses são os princípios básicos para você começar, permitindo que você 

00:14:41.000 --> 00:14:45.680
 criar repositórios fazer upload de seus arquivos fazer upload de seu código ser capaz de manipular 

00:14:45.680 --> 00:14:49.250
 de qualquer sistema para testá-lo em um Raspberry Pi na sua máquina Windows 

00:14:49.250 --> 00:14:54.410
 no seu desktop Linux, seja o que for e, em seguida, empurre todas essas alterações até o 

00:14:54.410 --> 00:14:59.030
 servidor para que possam ser baixados ou puxados para todos os seus sistemas, para que 

00:14:59.030 --> 00:15:01.810
 tudo o que existe 

00:15:07.430 --> 00:15:10.480
 [Música] 

