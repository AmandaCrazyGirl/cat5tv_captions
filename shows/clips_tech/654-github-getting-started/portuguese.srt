1
00:00:01,520 --> 00:00:07,200
agora, se você nunca se juntou a nós para uma pausa para o café da comunidade de categoria 5, você

2
00:00:07,200 --> 00:00:11,490
descubra mais sobre isso na categoria cinco dot TV, basta rolar para baixo na página inicial

3
00:00:11,490 --> 00:00:15,570
e você verá o intervalo para o café da comunidade junto com nossa programação quando

4
00:00:15,570 --> 00:00:19,920
vamos fazer o próximo, é um evento semanal que fazemos zoom '

5
00:00:19,920 --> 00:00:23,430
e é uma oportunidade para nossa comunidade se reunir e até mesmo

6
00:00:23,430 --> 00:00:29,189
embora todos estejamos experimentando o que estamos experimentando em nosso mundo hoje, nós

7
00:00:29,189 --> 00:00:35,370
adotou a abordagem de dizer em vez de falar sobre essas coisas, as coisas

8
00:00:35,370 --> 00:00:40,260
que estão nos deixando para baixo agora, vamos dar uma olhada e dizer olhe, todos nós

9
00:00:40,260 --> 00:00:47,039
preso nesta situação, o que é o que estou fazendo que me deixa animado

10
00:00:47,039 --> 00:00:52,010
o que estou experimentando tecnologicamente que é realmente

11
00:00:52,010 --> 00:00:56,489
interessante para mim e me ajudando a ocupar o tempo se estou preso em casa

12
00:00:56,489 --> 00:01:03,989
agora ou qualquer que seja o caso, então o assunto surgiu sobre o github porque

13
00:01:03,989 --> 00:01:10,380
estamos falando sobre programação e Peter está lá quase sempre para um

14
00:01:10,380 --> 00:01:14,580
pausa para o café da comunidade e Peter estava perguntando bem como você usa bem o github

15
00:01:14,580 --> 00:01:18,750
não são realmente algo que podemos mostrar ou falar, você sabe, caminhar com você

16
00:01:18,750 --> 00:01:22,799
durante a pausa para o café, mas descobri que, ei, isso seria realmente

17
00:01:22,799 --> 00:01:27,330
bom tópico para discutir na TV de tecnologia da categoria cinco e o motivo pelo qual

18
00:01:27,330 --> 00:01:34,350
surgiu inicialmente porque quando a Microsoft comprou o github eles o mantiveram

19
00:01:34,350 --> 00:01:39,570
indo até o status quo como estava e você tinha que pagar por alguns recursos, mas

20
00:01:39,570 --> 00:01:48,240
então, de repente, muito recentemente a Microsoft disse e todos aqueles pagos por recursos não

21
00:01:48,240 --> 00:01:51,899
todos eles, mas muitos daqueles pagos por recursos que você costumava ter que pagar

22
00:01:51,899 --> 00:01:55,500
por agora são gratuitos, então eles estão usando o serviço e estão basicamente

23
00:01:55,500 --> 00:02:00,659
oferecendo seu serviço premium totalmente gratuito no github com, então o que

24
00:02:00,659 --> 00:02:06,600
github well github é como um provedor de serviços em nuvem, mas é para

25
00:02:06,600 --> 00:02:10,800
desenvolvedores nos ajuda a sermos capazes de gerenciar nossos projetos para que vocês possam ir

26
00:02:10,800 --> 00:02:15,050
voltar no tempo, basicamente com o código e é realmente útil ser capaz de

27
00:02:15,050 --> 00:02:20,540
veja esses commits e veja como as mudanças impactaram seu projeto, é também um

28
00:02:20,540 --> 00:02:26,330
ótimo mecanismo de armazenamento para o seu código, porque você pode compartilhá-lo com

29
00:02:26,330 --> 00:02:30,350
outras pessoas, se você quiser agora, é claro que a Microsoft está tornando-o gratuito

30
00:02:30,350 --> 00:02:37,640
agora você pode ter repositórios privados gratuitos também e pode configurar

31
00:02:37,640 --> 00:02:41,300
quantas equipes você quiser, se quiser colaborar com outros programadores, mas

32
00:02:41,300 --> 00:02:45,920
essencialmente, o que ele faz para mim é permitir que eu compartilhe meu código online em

33
00:02:45,920 --> 00:02:49,459
de forma que outras pessoas possam usá-lo de código aberto, eles podem compilá-lo ou usar

34
00:02:49,459 --> 00:02:55,459
ou executá-lo em seus próprios computadores e, se decidirem, tudo bem, prefiro

35
00:02:55,459 --> 00:02:59,510
funciona assim ou talvez haja um bug e posso consertar que eles podem fazer o que

36
00:02:59,510 --> 00:03:05,390
chamado de pull request, então basicamente eles clonam meu repositório github meu software

37
00:03:05,390 --> 00:03:10,730
código, eles corrigem no computador e, em seguida, fazem uma solicitação de pull que empurra

38
00:03:10,730 --> 00:03:16,100
de volta enquanto eles o empurram de volta para o garfo e, em seguida, ele cria uma solicitação de pull

39
00:03:16,100 --> 00:03:21,709
para mim, para que eu veja que ei Joe vai acabar com a correção desse bug com o meu

40
00:03:21,709 --> 00:03:26,720
software, posso clicar em um botão e ele importará essa correção para o meu software,

41
00:03:26,720 --> 00:03:33,890
há muito nisso e é realmente muito poderoso, pode ser

42
00:03:33,890 --> 00:03:37,519
confuso, especialmente quando você começa a comprimi-los e mesclá-los com aqueles

43
00:03:37,519 --> 00:03:41,390
tipos de coisas que não vamos abordar hoje, mas o que eu quero

44
00:03:41,390 --> 00:03:47,150
mostrar como o conhecimento mais básico sobre como funciona vai

45
00:03:47,150 --> 00:03:53,720
permitem que você use o github de uma maneira eficaz, pense nisso como onde você está

46
00:03:53,720 --> 00:03:58,519
colocar seu código lá fora como um software de código aberto e não precisa ser

47
00:03:58,519 --> 00:04:03,470
você pode ter privado se quiser, mas no meu caso é o que estou fazendo, eu quero

48
00:04:03,470 --> 00:04:07,130
pessoas colaborem comigo ocasionalmente, talvez postem problemas

49
00:04:07,130 --> 00:04:10,430
se eles encontrarem um bug e eu ainda sou a pessoa que deve consertá-lo, mas em

50
00:04:10,430 --> 00:04:15,590
pelo menos minha comunidade está entrando em meu repositório de software e dizendo que este é um

51
00:04:15,590 --> 00:04:21,769
problema e você precisa consertá-lo, então github, calma, é onde você vai é sinal

52
00:04:21,769 --> 00:04:26,360
para obter sua conta gratuita, tudo o que você precisa fazer é clicar no link e clicar

53
00:04:26,360 --> 00:04:30,080
inscreva-se agora já tenho uma conta, então vou entrar como eu mesmo

54
00:04:30,080 --> 00:04:37,789
e faça login para ver aqui que se eu for para meus repositórios, se eu pular

55
00:04:37,789 --> 00:04:47,569
casa aqui e vai deixar carregar aqui deixa carregar tudo bem eu só vou ir

56
00:04:47,569 --> 00:04:56,000
direto para cat 5 TV é onde eu hospedo todos os meus softwares, então você vai lá

57
00:04:56,000 --> 00:04:58,909
github.com slash cat 5 TV e você verá como isso funciona

58
00:04:58,909 --> 00:05:02,779
então você pode ver que tenho uma tonelada de repositórios de software e todos eles

59
00:05:02,779 --> 00:05:07,099
projetos diferentes, todas as coisas diferentes que fiz ou continuo

60
00:05:07,099 --> 00:05:12,889
para fazer e há páginas e mais páginas disso, então quando você tiver seu github

61
00:05:12,889 --> 00:05:19,340
conta você pode entrar no que você vê aqui, que é a minha lista de repositórios, mas

62
00:05:19,340 --> 00:05:23,090
quando você se inscrever pela primeira vez, não terá tudo o que precisa para criar

63
00:05:23,090 --> 00:05:26,750
seu primeiro repositório, então a maneira que vou fazer agora entendo

64
00:05:26,750 --> 00:05:33,289
github não é obrigatório, esqueça ok e git não é o mesmo que github github é um

65
00:05:33,289 --> 00:05:39,919
serviço online e pense nisso como armazenamento em nuvem esqueça ok não é o mesmo

66
00:05:39,919 --> 00:05:46,400
coisa que é um armazenamento online para essa ferramenta de gerenciamento de pacote de código aberto ou um

67
00:05:46,400 --> 00:05:50,960
ferramenta de gerenciamento de projetos, então aqui no github eles fizeram isso realmente

68
00:05:50,960 --> 00:05:55,400
fácil simplesmente dizer novo repositório, então fui para meus repositórios e

69
00:05:55,400 --> 00:05:59,360
clicou em novo e, em seguida, vou dar-lhe um nome que vou chamar de

70
00:05:59,360 --> 00:06:07,419
um meu teste de sublinhado e uma descrição opcional este é um teste para o show

71
00:06:07,419 --> 00:06:12,800
se você deseja que seja público ou privado e, em seguida, inicialize-o com um

72
00:06:12,800 --> 00:06:17,029
leia-me, é sempre melhor fazer isso, é para que as pessoas possam acessá-lo

73
00:06:17,029 --> 00:06:20,839
imediatamente incluindo você mesmo, você deseja adicionar uma licença você deseja adicionar um

74
00:06:20,839 --> 00:06:24,740
git ignore, vou deixar ambos vazios, você descobrirá o que isso significa em

75
00:06:24,740 --> 00:06:30,680
o futuro e crie seu repositório, então agora eu tenho um chamado meu teste de sublinhado

76
00:06:30,680 --> 00:06:34,459
mas não há nada lá e eu terminei com o navegador, então agora o que vou fazer

77
00:06:34,459 --> 00:06:39,830
a fazer é abrir o meu terminal e no meu terminal vou

78
00:06:39,830 --> 00:06:43,320
digite fique bem para que você possa ver que eu

79
00:06:43,320 --> 00:06:48,330
já instalei se não tiver instalado então estou no Linux estou no

80
00:06:48,330 --> 00:06:53,460
Debian Linux aqui você pode digitar apt install git é isso que você vai

81
00:06:53,460 --> 00:07:05,640
digite eu não sou rude sudo su logado é rock ok apt instalar ainda vai dizer

82
00:07:05,640 --> 00:07:09,660
eu que eu já tenho o atual oh não há um não eu já tenho

83
00:07:09,660 --> 00:07:13,500
existem outras atualizações para mim, mas get já é a versão mais recente, então

84
00:07:13,500 --> 00:07:17,430
se você não tiver, você precisa instalá-lo se estiver em um RPM baseado

85
00:07:17,430 --> 00:07:22,980
sistema será yum install git e você também pode encontrá-lo em sua GUI

86
00:07:22,980 --> 00:07:28,740
gerenciador de repositório seu gerenciador de pacotes ou o que você usar como algum sináptico

87
00:07:28,740 --> 00:07:33,750
gerenciador de pacotes, por exemplo, uma vez instalado, crie uma pasta

88
00:07:33,750 --> 00:07:41,100
provavelmente em sua pasta de início e vamos chamá-los de repositórios apenas para que eu

89
00:07:41,100 --> 00:07:46,290
tenho um lugar onde sempre sei que meu código está certo, então isso vai ser um

90
00:07:46,290 --> 00:07:52,650
cópia local do meu repositório git, então agora vou digitar git clone e vamos

91
00:07:52,650 --> 00:08:00,210
vou copiar este URL github.com slash cat 5 TV slash meu teste de sublinhado para que eu possa

92
00:08:00,210 --> 00:08:08,010
copie isso apenas com ctrl C você vai se acostumar apenas a digitar é seu

93
00:08:08,010 --> 00:08:13,560
nome de usuário corta seu repositório e agora, se eu olhar para o meu sistema de arquivos, é

94
00:08:13,560 --> 00:08:20,760
clonado obter clone e então o nome do ou a URL do repositório agora

95
00:08:20,760 --> 00:08:25,920
se eu for para a minha pasta pessoal e depois para os repositórios, noto que é propriedade do root

96
00:08:25,920 --> 00:08:31,740
porque vejo cara superusuário processando, então agora há uma pasta chamada meu teste e

97
00:08:31,740 --> 00:08:38,250
dentro do meu teste, há um arquivo chamado readme MD, então dentro desta pasta estou

98
00:08:38,250 --> 00:08:43,250
vou para o meu teste e quero criar um novo arquivo, vou chamá-lo

99
00:08:43,250 --> 00:08:50,970
nano test dot SH e vamos criar um arquivo SH rápido para executar um script bash e

100
00:08:50,970 --> 00:08:55,640
Vou digitar echo oi como é isso, eu realmente deveria

101
00:08:55,640 --> 00:09:00,970
siga as normas, olá, mundo, tudo bem

102
00:09:00,970 --> 00:09:05,690
então eu escrevi e fechei, então agora você vê que há um arquivo chamado

103
00:09:05,690 --> 00:09:13,910
teste o ponto s H agora, quando eu transferir um arquivo para o github, as permissões são

104
00:09:13,910 --> 00:09:18,500
vai ser incluído com aquele push, então se eu fizer o teste ponto slash ponto s H você

105
00:09:18,500 --> 00:09:23,360
observe que diz permissão negada, preciso torná-lo executivo executivo todo chmod

106
00:09:23,360 --> 00:09:30,680
mais x test dot s H então agora se eu digitar test dot s HS s hello world então eu agora

107
00:09:30,680 --> 00:09:35,510
tenho meu primeiro pedaço de script pronto para ir para o github, é parte do meu

108
00:09:35,510 --> 00:09:41,870
repositório no meu computador local, mas ainda não está no github, então se você olhar

109
00:09:41,870 --> 00:09:45,500
github vou atualizar apenas para provar que você vê sua lista de arquivos aqui e

110
00:09:45,500 --> 00:09:50,390
ainda há apenas o readme ok então agora de volta na janela do meu terminal eu vou

111
00:09:50,390 --> 00:09:56,330
novamente, use o comando git. Vou buscar add star dentro dos repositórios

112
00:09:56,330 --> 00:10:01,270
pasta que está dizendo: encontre todos os arquivos que tenham quaisquer alterações e adicione-os ok get

113
00:10:01,270 --> 00:10:09,680
commit - am e depois entre aspas dê um nome ao seu commit, então vou dizer

114
00:10:09,680 --> 00:10:14,480
meu primeiro script e essas são apenas pequenas descrições e pressione Enter e

115
00:10:14,480 --> 00:10:19,220
agora está dizendo ei, você precisa nos dizer quem você é porque você nunca, nunca

116
00:10:19,220 --> 00:10:24,380
execute o git neste computador antes, então você precisa executar esses dois comandos muito

117
00:10:24,380 --> 00:10:29,030
obter configuração direta - - global, você só precisa

118
00:10:29,030 --> 00:10:33,350
faça isso uma vez, não se preocupe com o e-mail do usuário e, se tiver problemas para digitar, basta

119
00:10:33,350 --> 00:10:39,980
copie-o ok e então entre aspas vou colocar Robby na categoria 5 de TV e isso é

120
00:10:39,980 --> 00:10:48,890
apenas informando meu endereço de e-mail, então eu irei usuário nome de ponto eu não sei

121
00:10:48,890 --> 00:10:52,550
se você pode ouvir isso, mas na verdade é uma tempestade muito forte fora do nosso estúdio

122
00:10:52,550 --> 00:10:56,720
hoje, então as luzes estão piscando algumas vezes e acho que vamos conseguir

123
00:10:56,720 --> 00:11:02,090
através dele de qualquer maneira, tudo bem, exclua isso e mude meu nome para Robby

124
00:11:02,090 --> 00:11:06,710
Ferguson entra ok feito então eu só tenho que fazer isso uma vez então agora cena

125
00:11:06,710 --> 00:11:11,420
da próxima vez que eu executar o git commit - ele está apenas adicionando, certo?

126
00:11:11,420 --> 00:11:15,050
então eu adicionei e ele vê que um arquivo foi alterado, há dois

127
00:11:15,050 --> 00:11:20,270
inserções e teste de SH é novo, então ele vai criar isso agora o final

128
00:11:20,270 --> 00:11:26,450
comando que preciso inserir é get push origin e vou especificar o

129
00:11:26,450 --> 00:11:32,360
mestre que é o mestre do ramo, então o mestre de origem e agora vai

130
00:11:32,360 --> 00:11:35,720
peça meu nome de usuário e senha que eu inseri quando criei meu

131
00:11:35,720 --> 00:11:44,360
conta, então cat5 TV é meu nome de usuário e minha senha Eu uso o LastPass e gero novos

132
00:11:44,360 --> 00:11:49,430
senhas o tempo todo e elas são enormes e malucas, então copiei uma senha

133
00:11:49,430 --> 00:11:57,500
e então eu colei e pronto, carreguei os dados para o meu

134
00:11:57,500 --> 00:12:02,840
repositório e é feito então f5 para atualizar e você deve ver o teste SH

135
00:12:02,840 --> 00:12:09,200
agora faz parte do meu repositório github e aí está e mostra que é

136
00:12:09,200 --> 00:12:17,330
olá, mundo executivo, agora de volta aqui, vamos apenas fingir que fiz alterações

137
00:12:17,330 --> 00:12:20,750
em outro lugar, então em outro computador e vou fazer isso por meio do navegador

138
00:12:20,750 --> 00:12:29,270
só para te mostrar neste sistema eu vou ecoar olá novamente ok e então

139
00:12:29,270 --> 00:12:33,680
Vou salvar essas alterações, não vou dar um nome ou algo parecido

140
00:12:33,680 --> 00:12:37,340
essa descrição vou apenas confirmar, então agora o script se parece com isso, então veja

141
00:12:37,340 --> 00:12:41,600
como eu mudo isso no navegador também, você pode fazer isso de qualquer lugar, então agora se

142
00:12:41,600 --> 00:12:47,510
Eu vejo meu arquivo localmente no meu computador no repositório lá vamos nós ainda

143
00:12:47,510 --> 00:12:53,630
apenas diga olá, mundo, ok, então eu vou conseguir puxar novamente Estou fazendo isso tudo

144
00:12:53,630 --> 00:12:58,700
dentro da minha pasta de teste de sublinhado, então git pull irá procurar por qualquer

145
00:12:58,700 --> 00:13:02,510
mudanças que foram feitas em outro lugar e puxá-las para o meu computador para

146
00:13:02,510 --> 00:13:07,460
está sempre sincronizando essas mudanças, então agora, se eu abrir o Nano e abrir aquele arquivo

147
00:13:07,460 --> 00:13:14,000
você pode ver que aquele novo olá de novo agora faz parte disso, então vou mostrar o eco

148
00:13:14,000 --> 00:13:20,270
olá três vezes e vou salvar isso e agora vou fazer o exato

149
00:13:20,270 --> 00:13:22,400
a mesma coisa, mas mostrar como é diferente agora que

150
00:13:22,400 --> 00:13:28,490
Já inseri meu nome e meu endereço de e-mail get Ad Star get commit -

151
00:13:28,490 --> 00:13:39,410
sou final update get push origin master cap 5 TV é meu nome de usuário e minha senha

152
00:13:39,410 --> 00:13:50,120
é uma string de cerca de 64 caracteres selecionados aleatoriamente e vou colar

153
00:13:50,120 --> 00:13:56,060
isso e lá vamos nós, então isso é tudo que temos agora empurrando minhas mudanças

154
00:13:56,060 --> 00:14:00,680
localmente para o servidor github para que o compartilhe novamente com todos os outros ou

155
00:14:00,680 --> 00:14:05,510
com meus outros sistemas quando faço um puxão, então posso obter clomp

156
00:14:05,510 --> 00:14:09,980
me perdoe, clone algo e não precisa ser meu, pode ser

157
00:14:09,980 --> 00:14:14,690
o repositório github de outra pessoa, desde que seja público, mas então posso

158
00:14:14,690 --> 00:14:19,070
mudanças nele na minha máquina local e então posso fazer um push agora que você precisa

159
00:14:19,070 --> 00:14:24,710
o repositório, a fim de fazer um push, a maneira de fazer alterações para alguém

160
00:14:24,710 --> 00:14:29,570
o repositório do outro é bifurcá-lo, então quando você for para o repositório, clique em

161
00:14:29,570 --> 00:14:34,040
o botão chamado fork e basicamente faz uma cópia dele em sua própria conta

162
00:14:34,040 --> 00:14:37,550
onde você pode fazer alterações e aí é onde você pode fazer solicitações de pull

163
00:14:37,550 --> 00:14:41,000
mas esses são os princípios básicos para você começar, que lhe permitirão

164
00:14:41,000 --> 00:14:45,680
criar repositórios, carregar seus arquivos, carregar seu código, ser capaz de manipular

165
00:14:45,680 --> 00:14:49,250
de qualquer sistema para que você possa testá-lo em um Raspberry Pi em sua máquina Windows

166
00:14:49,250 --> 00:14:54,410
em seu desktop Linux em qualquer coisa e, em seguida, envie todas essas mudanças para

167
00:14:54,410 --> 00:14:59,030
servidor para que possam ser baixados ou puxados para todos os seus sistemas para que

168
00:14:59,030 --> 00:15:01,810
tudo que há para isso

169
00:15:07,430 --> 00:15:10,480
[Música]

