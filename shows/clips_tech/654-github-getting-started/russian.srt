1
00:00:01,520 --> 00:00:07,200
теперь, если вы никогда не присоединялись к нам на кофе-брейк сообщества категории 5, вы

2
00:00:07,200 --> 00:00:11,490
узнайте больше об этом на телевидении пятой категории, просто прокрутите вниз на главной странице

3
00:00:11,490 --> 00:00:15,570
и вы увидите там кофе-брейк сообщества вместе с нашим расписанием, когда

4
00:00:15,570 --> 00:00:19,920
мы собираемся провести следующее мероприятие, которое мы проводим еженедельно »

5
00:00:19,920 --> 00:00:23,430
и это возможность для нашего сообщества собраться вместе и даже

6
00:00:23,430 --> 00:00:29,189
хотя мы все переживаем то, что переживаем в нашем мире сегодня, мы

7
00:00:29,189 --> 00:00:35,370
использовал подход, чтобы сказать, а не говорить о тех вещах,

8
00:00:35,370 --> 00:00:40,260
которые сбивают нас прямо сейчас, давайте посмотрим на это и скажем, смотри, мы все

9
00:00:40,260 --> 00:00:47,039
застрял в этой ситуации, что я делаю, что меня взволновало

10
00:00:47,039 --> 00:00:52,010
с чем я экспериментирую с технологической точки зрения

11
00:00:52,010 --> 00:00:56,489
интересно мне и помогает занять время, застрял ли я дома

12
00:00:56,489 --> 00:01:03,989
прямо сейчас или как бы то ни было, так что тема возникла о github, потому что

13
00:01:03,989 --> 00:01:10,380
мы говорим о программировании, и Питер бывает там почти каждый раз, чтобы

14
00:01:10,380 --> 00:01:14,580
кофе-брейк сообщества, и Питер спрашивал, как вы хорошо используете github

15
00:01:14,580 --> 00:01:18,750
не совсем они то, что мы можем показать или поговорить, вы знаете, ходить с вами

16
00:01:18,750 --> 00:01:22,799
перерыв на кофе, но выяснилось, что это было бы действительно

17
00:01:22,799 --> 00:01:27,330
хорошая тема для обсуждения на телевидении пятой категории и причина, по которой она

18
00:01:27,330 --> 00:01:34,350
возникла изначально, потому что, когда Microsoft купила github, они сохранили его

19
00:01:34,350 --> 00:01:39,570
сохранялся статус-кво, и вам приходилось платить за определенные функции, но

20
00:01:39,570 --> 00:01:48,240
потом вдруг совсем недавно Microsoft сказала, что все те, кто платит за функции, не

21
00:01:48,240 --> 00:01:51,899
все они, но многие из тех, что платили за функции, за которые раньше приходилось платить

22
00:01:51,899 --> 00:01:55,500
for теперь бесплатны, поэтому они пользуются услугами и в основном

23
00:01:55,500 --> 00:02:00,659
раздавать свои премиальные услуги абсолютно бесплатно на github com, так что

24
00:02:00,659 --> 00:02:06,600
github ну github - это своего рода поставщик облачных услуг, но он для

25
00:02:06,600 --> 00:02:10,800
разработчикам, это помогает нам управлять нашими проектами, чтобы вы могли

26
00:02:10,800 --> 00:02:15,050
назад во времени в основном с помощью кода, и действительно полезно иметь возможность

27
00:02:15,050 --> 00:02:20,540
увидеть эти коммиты и посмотреть, как изменения повлияли на ваш проект, это также

28
00:02:20,540 --> 00:02:26,330
отличный механизм хранения для вашего кода, потому что вы можете поделиться им с

29
00:02:26,330 --> 00:02:30,350
другие люди, если вы хотите сейчас, конечно, Microsoft делает это бесплатно

30
00:02:30,350 --> 00:02:37,640
теперь у вас могут быть бесплатные частные репозитории, и вы можете настроить

31
00:02:37,640 --> 00:02:41,300
столько команд, сколько вы хотите, если вы хотите сотрудничать с другими программистами, но

32
00:02:41,300 --> 00:02:45,920
по сути то, что он делает для меня, так это то, что он позволяет мне делиться своим кодом онлайн в

33
00:02:45,920 --> 00:02:49,459
таким образом, чтобы другие люди могли использовать его с открытым исходным кодом, они могли скомпилировать его или использовать

34
00:02:49,459 --> 00:02:55,459
или запустить его на своих компьютерах, а затем, если они решат, хорошо, я бы предпочел

35
00:02:55,459 --> 00:02:59,510
это работает так или, может быть, это ошибка, и я могу исправить, что они могут делать то, что

36
00:02:59,510 --> 00:03:05,390
называется запрос на перенос, поэтому в основном они клонируют мой репозиторий github, мое программное обеспечение

37
00:03:05,390 --> 00:03:10,730
код, который они исправляют на своем компьютере, а затем они выполняют запрос на перенос, который подталкивает

38
00:03:10,730 --> 00:03:16,100
его обратно, пока они подталкивают его обратно к своей вилке, а затем он создает запрос на перенос

39
00:03:16,100 --> 00:03:21,709
для меня, чтобы я увидел, что привет, Джо, взорвет их исправление этой ошибки моим

40
00:03:21,709 --> 00:03:26,720
программное обеспечение, я могу нажать кнопку, и оно импортирует исправление в мое программное обеспечение, поэтому

41
00:03:26,720 --> 00:03:33,890
в этом много всего, и это действительно очень мощно, это может быть

42
00:03:33,890 --> 00:03:37,519
сбивает с толку, особенно когда вы занимаетесь раздавливанием и объединением их и тех

43
00:03:37,519 --> 00:03:41,390
вещи, в которые мы не собираемся сегодня входить, но что я действительно хочу

44
00:03:41,390 --> 00:03:47,150
покажу вам, как самые базовые знания о том, как это работает, будут

45
00:03:47,150 --> 00:03:53,720
позволяют эффективно использовать github, думайте о нем как о том, где вы

46
00:03:53,720 --> 00:03:58,519
размещать свой код как программное обеспечение с открытым исходным кодом и не обязательно

47
00:03:58,519 --> 00:04:03,470
если хочешь, можешь оставить это наедине, но в моем случае это то, что я делаю, я хочу

48
00:04:03,470 --> 00:04:07,130
люди, которые время от времени будут сотрудничать со мной, возможно, они будут публиковать проблемы

49
00:04:07,130 --> 00:04:10,430
если они обнаружат ошибку, и тогда я все еще тот человек, который должен ее исправить, но в

50
00:04:10,430 --> 00:04:15,590
по крайней мере, мое сообщество входит в мой репозиторий программного обеспечения и говорит, что это

51
00:04:15,590 --> 00:04:21,769
проблема, и вам нужно все исправить, так что спокойствие на github - это то, куда вы идете, знак

52
00:04:21,769 --> 00:04:26,360
для вашей бесплатной учетной записи все, что вам нужно сделать, это нажать на ссылку и нажать

53
00:04:26,360 --> 00:04:30,080
Зарегистрируйтесь сейчас У меня уже есть учетная запись, поэтому я войду под своим именем

54
00:04:30,080 --> 00:04:37,789
и войдите в систему, чтобы вы могли видеть, что если я перейду в свои репозитории, то если я прыгну

55
00:04:37,789 --> 00:04:47,569
домой здесь и иди, чтобы он загрузился здесь, пусть он загрузится, хорошо, я просто пойду

56
00:04:47,569 --> 00:04:56,000
прямо на телевизор категории 5, где я размещаю все свое программное обеспечение, так что вы туда

57
00:04:56,000 --> 00:04:58,909
github.com коснитесь экрана cat 5 TV, и вы увидите, как это работает

58
00:04:58,909 --> 00:05:02,779
так что вы можете видеть, что у меня куча репозиториев программного обеспечения, и все они

59
00:05:02,779 --> 00:05:07,099
разные проекты все разные вещи, которые я сделал или продолжаю

60
00:05:07,099 --> 00:05:12,889
делать, и есть страницы, и страницы, и страницы, поэтому, как только у вас будет свой github

61
00:05:12,889 --> 00:05:19,340
учетная запись вы можете войти в то, что вы видите здесь, это мой список репозиториев, но

62
00:05:19,340 --> 00:05:23,090
когда вы впервые зарегистрируетесь, у вас не будет всего того, что вам нужно создать

63
00:05:23,090 --> 00:05:26,750
ваш первый репозиторий, так что теперь поймите, как я это сделаю

64
00:05:26,750 --> 00:05:33,289
github не требуется, забудьте хорошо, и git - это не то же самое, что github, github - это

65
00:05:33,289 --> 00:05:39,919
онлайн-сервис и думайте об этом как об облачном хранилище, забудьте, хорошо, это не то же самое

66
00:05:39,919 --> 00:05:46,400
то, что это онлайн-хранилище для этого инструмента управления пакетами с открытым исходным кодом или

67
00:05:46,400 --> 00:05:50,960
инструмент управления проектами, так что здесь, на github, они действительно сделали это

68
00:05:50,960 --> 00:05:55,400
просто сказать новый репозиторий, поэтому я зашел в свои репозитории и

69
00:05:55,400 --> 00:05:59,360
нажал на новое, а затем я дам ему имя, которое я назову

70
00:05:59,360 --> 00:06:07,419
один мой тест на подчеркивание и дополнительное описание это тест для шоу

71
00:06:07,419 --> 00:06:12,800
хотите ли вы, чтобы он был общедоступным или частным, а затем инициализировать его с помощью

72
00:06:12,800 --> 00:06:17,029
ридми всегда лучше делать так, чтобы люди могли получить к нему доступ

73
00:06:17,029 --> 00:06:20,839
сразу, включая себя, вы хотите добавить лицензию, хотите ли вы добавить

74
00:06:20,839 --> 00:06:24,740
git ignore, я оставлю их пустыми, вы узнаете, что это значит в

75
00:06:24,740 --> 00:06:30,680
будущее и создайте свой репозиторий, так что теперь у меня есть тот, который называется моим тестом подчеркивания

76
00:06:30,680 --> 00:06:34,459
но там ничего нет, и я закончил с браузером, так что теперь, что я собираюсь

77
00:06:34,459 --> 00:06:39,830
я собираюсь поднять свой терминал, и в моем терминале я собираюсь

78
00:06:39,830 --> 00:06:43,320
типа, ладно, так что ты видишь, что я

79
00:06:43,320 --> 00:06:48,330
уже установил его, если у вас еще нет, так что я на Linux Я нахожусь

80
00:06:48,330 --> 00:06:53,460
Debian Linux здесь вы можете ввести apt install git, это то, что вы собираетесь

81
00:06:53,460 --> 00:07:05,640
type Я не грубый sudo su вошел в систему, это нормально, можно установить, но он скажет

82
00:07:05,640 --> 00:07:09,660
мне, что у меня уже есть ток, о, нет, нет, я уже получил

83
00:07:09,660 --> 00:07:13,500
есть и другие обновления для меня, но получить уже самую новую версию, поэтому

84
00:07:13,500 --> 00:07:17,430
если у вас его нет, вам нужно установить его, если вы используете RPM на основе

85
00:07:17,430 --> 00:07:22,980
система это будет yum install git, и вы также можете найти его в своем графическом интерфейсе

86
00:07:22,980 --> 00:07:28,740
менеджер репозитория, ваш менеджер пакетов или что-то, что вы используете, например, какой-то синаптический

87
00:07:28,740 --> 00:07:33,750
менеджер пакетов, например, поэтому после установки создайте папку

88
00:07:33,750 --> 00:07:41,100
вероятно, в вашей домашней папке, и мы назовем эти репозитории, чтобы я

89
00:07:41,100 --> 00:07:46,290
есть место, где я всегда знаю, что мой код правильный, так что это будет

90
00:07:46,290 --> 00:07:52,650
локальная копия моего репозитория git, так что теперь я наберу git clone, и мы

91
00:07:52,650 --> 00:08:00,210
собираюсь скопировать этот URL github.com косая черта кошка 5 телевизор косая черта мой тест подчеркивания, чтобы я мог

92
00:08:00,210 --> 00:08:08,010
скопируйте это просто с помощью ctrl C, вы привыкнете просто набирать его, это ваш

93
00:08:08,010 --> 00:08:13,560
имя пользователя сокращает ваш репозиторий, и теперь, если я посмотрю на свою файловую систему, она

94
00:08:13,560 --> 00:08:20,760
cloned получить клон, а затем имя или URL-адрес репозитория, так что теперь

95
00:08:20,760 --> 00:08:25,920
если я захожу в свою домашнюю папку, а затем в репозитории, замечаю, что она принадлежит root

96
00:08:25,920 --> 00:08:31,740
потому что я вижу суперпользователя, который подает в суд, так что теперь есть папка под названием мой тест и

97
00:08:31,740 --> 00:08:38,250
в моем тесте есть файл с именем readme MD, поэтому в этой папке я

98
00:08:38,250 --> 00:08:43,250
собираюсь войти в свой тест, и я хочу создать новый файл, который я назову

99
00:08:43,250 --> 00:08:50,970
nano test dot SH, и мы создадим быстрый файл SH для запуска сценария bash и

100
00:08:50,970 --> 00:08:55,640
Я собираюсь набрать эхо, привет, как дела, я действительно должен

101
00:08:55,640 --> 00:09:00,970
Придерживайтесь нормы, привет мир, как это нормально

102
00:09:00,970 --> 00:09:05,690
поэтому я написал это и закрыл, так что теперь вы видите, что есть файл с именем

103
00:09:05,690 --> 00:09:13,910
test dot s H теперь, когда я передаю файл на github, разрешения

104
00:09:13,910 --> 00:09:18,500
будет включен с этим нажатием, поэтому, если я сделаю тестовую точку с косой чертой, вы

105
00:09:18,500 --> 00:09:23,360
обратите внимание, в нем говорится, что разрешение отклонено, мне нужно сделать его исполнительным исполнителем all chmod

106
00:09:23,360 --> 00:09:30,680
плюс x test dot s H, так что теперь, если я наберу test dot s HS s привет, мир, я сейчас

107
00:09:30,680 --> 00:09:35,510
подготовьте мой самый первый фрагмент скрипта для перехода на github, это часть моих

108
00:09:35,510 --> 00:09:41,870
репозиторий на моем локальном компьютере, но его еще нет в github, поэтому, если вы посмотрите на

109
00:09:41,870 --> 00:09:45,500
github Я обновлюсь, чтобы доказать, что вы видите здесь свой список файлов и

110
00:09:45,500 --> 00:09:50,390
там все еще есть только readme, так что теперь, вернувшись в окно терминала, я собираюсь

111
00:09:50,390 --> 00:09:56,330
снова используйте эту команду git, я собираюсь добавить звезду в репозиториях

112
00:09:56,330 --> 00:10:01,270
папка, в которой говорится, найдите любые файлы, в которых есть какие-либо изменения, и добавьте их.

113
00:10:01,270 --> 00:10:09,680
commit - am, а затем в кавычках дайте вашему коммиту имя, поэтому я скажу

114
00:10:09,680 --> 00:10:14,480
мой первый сценарий, и это всего лишь короткие описания, и нажмите Enter и

115
00:10:14,480 --> 00:10:19,220
теперь он говорит, эй, тебе нужно сказать нам, кто ты, потому что ты никогда не

116
00:10:19,220 --> 00:10:24,380
запустите git на этом компьютере раньше, поэтому вам нужно выполнить эти две команды довольно

117
00:10:24,380 --> 00:10:29,030
просто получить конфигурацию - - глобально вам нужно только

118
00:10:29,030 --> 00:10:33,350
сделайте это один раз, не волнуйтесь, адрес электронной почты пользователя, и если у вас возникли проблемы с его вводом, просто

119
00:10:33,350 --> 00:10:39,980
скопируйте это нормально, а затем в кавычках я отнесу Робби к категории 5 TV, и это

120
00:10:39,980 --> 00:10:48,890
просто скажу ему свой адрес электронной почты, тогда я пойду имя пользователя точка, я не знаю

121
00:10:48,890 --> 00:10:52,550
если вы слышите это, но на самом деле за пределами нашей студии действительно сильный шторм

122
00:10:52,550 --> 00:10:56,720
сегодня, так что огни мигают несколько раз, но я думаю, мы получим

123
00:10:56,720 --> 00:11:02,090
в любом случае, так что ладно, удалите это и измените мое имя на Робби

124
00:11:02,090 --> 00:11:06,710
Фергюсон входит, хорошо сделано, мне нужно сделать это только один раз, так что теперь сцена

125
00:11:06,710 --> 00:11:11,420
в следующий раз, когда я запускаю этот git commit - он просто добавляет это нормально?

126
00:11:11,420 --> 00:11:15,050
поэтому я добавил его, и он видит, что один файл изменился, есть два

127
00:11:15,050 --> 00:11:20,270
вставки и тестирование SH является новым, так что теперь последний

128
00:11:20,270 --> 00:11:26,450
мне нужно ввести команду get push origin, и я собираюсь указать

129
00:11:26,450 --> 00:11:32,360
master, который является мастером ветки, поэтому origin master, и теперь он собирается

130
00:11:32,360 --> 00:11:35,720
спросите у меня мое имя пользователя и пароль, которые я ввел при создании своего

131
00:11:35,720 --> 00:11:44,360
учетная запись, поэтому cat5 TV - это мое имя пользователя и мой пароль. Я использую LastPass и создаю новый

132
00:11:44,360 --> 00:11:49,430
пароли все время, и они огромные и сумасшедшие, поэтому я скопировал пароль

133
00:11:49,430 --> 00:11:57,500
а затем я вставил его, и вот он загружает эти данные на мой

134
00:11:57,500 --> 00:12:02,840
репозиторий, и это сделано, чтобы обновить f5, и вы должны увидеть тестовый SH

135
00:12:02,840 --> 00:12:09,200
теперь является частью моего репозитория github, и вот он, и он показывает, что это

136
00:12:09,200 --> 00:12:17,330
исполнительный привет мир, теперь вернемся сюда, так что давайте просто представим, что я внес изменения

137
00:12:17,330 --> 00:12:20,750
в другом месте так на другом компьютере, и я собираюсь сделать это через браузер

138
00:12:20,750 --> 00:12:29,270
просто чтобы показать вам эту систему, я снова пойду эхом, привет, ладно, а потом

139
00:12:29,270 --> 00:12:33,680
Я сохраню эти изменения, я не собираюсь называть его имени или чего-то подобного

140
00:12:33,680 --> 00:12:37,340
это описание я просто собираюсь подтвердить, так что теперь сценарий выглядит так, так что смотрите

141
00:12:37,340 --> 00:12:41,600
как я изменил это в браузере, вы можете сделать это откуда угодно, так что теперь, если

142
00:12:41,600 --> 00:12:47,510
Я смотрю свой файл локально на моем компьютере в репозитории, вот и все

143
00:12:47,510 --> 00:12:53,630
просто говорит привет мир хорошо, так что я собираюсь снова потянуть, я делаю все это

144
00:12:53,630 --> 00:12:58,700
в моей тестовой папке подчеркивания, поэтому git pull будет искать любые

145
00:12:58,700 --> 00:13:02,510
изменения, которые были сделаны в другом месте, и перенести их на мой компьютер, чтобы

146
00:13:02,510 --> 00:13:07,460
он всегда синхронизирует эти изменения, поэтому теперь, если я открою Nano и открою этот файл

147
00:13:07,460 --> 00:13:14,000
Вы видите, что новый привет снова стал частью этого, так что я покажу вам эхо

148
00:13:14,000 --> 00:13:20,270
привет три раза, и я сохраню это, а теперь я сделаю то, что

149
00:13:20,270 --> 00:13:22,400
то же самое, но покажу вам, как это изменилось сейчас, когда

150
00:13:22,400 --> 00:13:28,490
Я уже ввел свое имя и адрес электронной почты для получения подтверждения от Ad Star -

151
00:13:28,490 --> 00:13:39,410
последнее обновление получить push origin master cap 5 TV - мое имя пользователя и мой пароль

152
00:13:39,410 --> 00:13:50,120
это строка из примерно 64 символов, выбранных случайным образом, и я собираюсь вставить

153
00:13:50,120 --> 00:13:56,060
Вот и мы идем, так что это все, что нужно, чтобы теперь продвигать мои изменения

154
00:13:56,060 --> 00:14:00,680
локально на сервер github, чтобы снова поделиться им со всеми или

155
00:14:00,680 --> 00:14:05,510
с другими моими системами, когда я делаю тягу, так что, делая это, я могу получить

156
00:14:05,510 --> 00:14:09,980
простите меня, git clone something, и это не обязательно должно быть моим, это может быть

157
00:14:09,980 --> 00:14:14,690
чужой репозиторий github, если он общедоступен, но тогда я могу сделать

158
00:14:14,690 --> 00:14:19,070
меняет его на моем локальном компьютере, а затем я могу сделать push, теперь у вас есть

159
00:14:19,070 --> 00:14:24,710
репозиторий, чтобы сделать push, чтобы внести изменения в кого-то

160
00:14:24,710 --> 00:14:29,570
другой репозиторий должен его разветвлять, поэтому, когда вы переходите в репозиторий, вы нажимаете

161
00:14:29,570 --> 00:14:34,040
кнопка называется fork, и она в основном делает ее копию в вашей учетной записи

162
00:14:34,040 --> 00:14:37,550
в которые вы можете внести изменения, а затем вы можете выполнять запросы на вытягивание

163
00:14:37,550 --> 00:14:41,000
но это основы для начала, которые позволят вам

164
00:14:41,000 --> 00:14:45,680
создавать репозитории загружать файлы загружать код иметь возможность манипулировать

165
00:14:45,680 --> 00:14:49,250
его из любой системы, чтобы вы могли протестировать его на Raspberry Pi на вашем компьютере с Windows

166
00:14:49,250 --> 00:14:54,410
на вашем рабочем столе Linux на чем угодно, а затем отправьте все эти изменения в

167
00:14:54,410 --> 00:14:59,030
сервер, чтобы их можно было загрузить или извлечь во все ваши системы, чтобы

168
00:14:59,030 --> 00:15:01,810
все, что нужно для этого

169
00:15:07,430 --> 00:15:10,480
[Музыка]

